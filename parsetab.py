
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDVETOR BREAK CALL CAT COMMA DEDENT DIFERENTE DIVIDIR ELSE FALSE FOR FUNCTION ID IDENT IF IGUAL IGUALAT IN INF LCHAV LINHA LPAREN MAIOR MAIORIGUAL MENOR MENORIGUAL MODULO NA NANA NA_CHARACTER_ NA_COMPLEX NA_INTEGER_ NA_REAL_ NEXT NOTLOGICO NULL NUMBER_FLOAT NUMBER_INT OR ORVETOR PASS POT PV RCHAV REPEAT RETURN RPAREN SEQUENCIAL SOMA SUBTRAIR SWITCH TRUE VEZES WHILE XORprogram : funcdecl\n                | funcdecl program\n                funcdecl : signature bodysignature : ID ID LPAREN sigparams RPAREN\n                 | ID ID LPAREN RPARENsigparams : ID ID\n                  | ID ID COMMA sigparams\n     body : LCHAV stms RCHAV\n             | LCHAV RCHAV stms : stm\n            | stm stms stm :  exp PV  stm : WHILE LPAREN exp RPAREN body  stm : RETURN exp PV  stm : FOR LPAREN ID IN exp RPAREN body  stm : REPEAT body WHILE LPAREN exp RPAREN PV  stm : BREAK PV  stm : NEXT PV  stm :  SWITCH LPAREN exp COMMA  cases RPAREN cases : exp IGUAL body\n            | exp IGUAL body cases\n            | exp IGUAL stm\n            | exp IGUAL stm cases stm : IF LPAREN exp RPAREN body ELSE body  exp :    exp IGUAL exp1\n              | exp1exp1 : exp1 SOMA exp2\n         | exp2exp1 : exp1 SUBTRAIR exp2exp2 : exp2 VEZES exp3\n           | exp3exp2 : exp2 DIVIDIR exp3 exp3 : exp4 POT exp3\n            | exp4exp4 : call\n            | NUMBER_INT\n            | NUMBER_FLOAT\n            | ID\n            | TRUE\n            | FALSEcall : ID LPAREN params RPAREN\n            | ID LPAREN RPARENparams : exp COMMA params\n            | exp '
    
_lr_action_items = {'ID':([0,2,4,6,7,10,11,14,31,32,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,55,71,73,74,75,77,78,88,89,91,92,93,94,96,],[4,4,8,-3,16,-9,16,16,50,-8,-12,16,16,56,16,-17,-18,16,16,16,16,16,16,16,68,-14,16,16,16,16,50,-13,16,-19,-15,-16,16,16,-24,]),'$end':([1,2,5,6,10,32,],[0,-1,-2,-3,-9,-8,]),'LCHAV':([3,17,52,69,70,76,86,88,90,],[7,7,-5,-4,7,7,7,7,7,]),'RCHAV':([7,9,10,11,32,33,34,41,42,55,78,89,91,92,96,],[10,32,-9,-10,-8,-11,-12,-17,-18,-14,-13,-19,-15,-16,-24,]),'WHILE':([7,10,11,32,34,40,41,42,55,78,88,89,91,92,96,],[13,-9,13,-8,-12,60,-17,-18,-14,-13,13,-19,-15,-16,-24,]),'RETURN':([7,10,11,32,34,41,42,55,78,88,89,91,92,96,],[14,-9,14,-8,-12,-17,-18,-14,-13,14,-19,-15,-16,-24,]),'FOR':([7,10,11,32,34,41,42,55,78,88,89,91,92,96,],[15,-9,15,-8,-12,-17,-18,-14,-13,15,-19,-15,-16,-24,]),'REPEAT':([7,10,11,32,34,41,42,55,78,88,89,91,92,96,],[17,-9,17,-8,-12,-17,-18,-14,-13,17,-19,-15,-16,-24,]),'BREAK':([7,10,11,32,34,41,42,55,78,88,89,91,92,96,],[18,-9,18,-8,-12,-17,-18,-14,-13,18,-19,-15,-16,-24,]),'NEXT':([7,10,11,32,34,41,42,55,78,88,89,91,92,96,],[19,-9,19,-8,-12,-17,-18,-14,-13,19,-19,-15,-16,-24,]),'SWITCH':([7,10,11,32,34,41,42,55,78,88,89,91,92,96,],[20,-9,20,-8,-12,-17,-18,-14,-13,20,-19,-15,-16,-24,]),'IF':([7,10,11,32,34,41,42,55,78,88,89,91,92,96,],[21,-9,21,-8,-12,-17,-18,-14,-13,21,-19,-15,-16,-24,]),'NUMBER_INT':([7,10,11,14,32,34,35,36,39,41,42,43,44,45,46,47,48,49,55,71,73,74,75,78,88,89,91,92,93,94,96,],[27,-9,27,27,-8,-12,27,27,27,-17,-18,27,27,27,27,27,27,27,-14,27,27,27,27,-13,27,-19,-15,-16,27,27,-24,]),'NUMBER_FLOAT':([7,10,11,14,32,34,35,36,39,41,42,43,44,45,46,47,48,49,55,71,73,74,75,78,88,89,91,92,93,94,96,],[28,-9,28,28,-8,-12,28,28,28,-17,-18,28,28,28,28,28,28,28,-14,28,28,28,28,-13,28,-19,-15,-16,28,28,-24,]),'TRUE':([7,10,11,14,32,34,35,36,39,41,42,43,44,45,46,47,48,49,55,71,73,74,75,78,88,89,91,92,93,94,96,],[29,-9,29,29,-8,-12,29,29,29,-17,-18,29,29,29,29,29,29,29,-14,29,29,29,29,-13,29,-19,-15,-16,29,29,-24,]),'FALSE':([7,10,11,14,32,34,35,36,39,41,42,43,44,45,46,47,48,49,55,71,73,74,75,78,88,89,91,92,93,94,96,],[30,-9,30,30,-8,-12,30,30,30,-17,-18,30,30,30,30,30,30,30,-14,30,30,30,30,-13,30,-19,-15,-16,30,30,-24,]),'LPAREN':([8,13,15,16,20,21,60,],[31,36,38,39,43,44,74,]),'RPAREN':([10,16,22,23,24,25,26,27,28,29,30,31,32,34,39,41,42,51,53,54,55,57,58,59,62,63,64,65,66,67,68,72,78,79,80,81,83,85,89,91,92,93,94,96,97,98,],[-9,-38,-26,-28,-31,-34,-35,-36,-37,-39,-40,52,-8,-12,58,-17,-18,69,-25,70,-14,72,-42,-44,76,-27,-29,-30,-32,-33,-6,-41,-13,86,-43,87,89,-7,-19,-15,-16,-20,-22,-24,-21,-23,]),'ELSE':([10,32,84,],[-9,-8,90,]),'PV':([12,16,18,19,22,23,24,25,26,27,28,29,30,37,53,58,63,64,65,66,67,72,87,95,],[34,-38,41,42,-26,-28,-31,-34,-35,-36,-37,-39,-40,55,-25,-42,-27,-29,-30,-32,-33,-41,92,-26,]),'IGUAL':([12,16,22,23,24,25,26,27,28,29,30,37,53,54,58,59,61,62,63,64,65,66,67,72,79,81,82,95,],[35,-38,-26,-28,-31,-34,-35,-36,-37,-39,-40,35,-25,35,-42,35,35,35,-27,-29,-30,-32,-33,-41,35,35,88,-25,]),'POT':([16,25,26,27,28,29,30,58,72,],[-38,49,-35,-36,-37,-39,-40,-42,-41,]),'VEZES':([16,23,24,25,26,27,28,29,30,58,63,64,65,66,67,72,],[-38,47,-31,-34,-35,-36,-37,-39,-40,-42,47,47,-30,-32,-33,-41,]),'DIVIDIR':([16,23,24,25,26,27,28,29,30,58,63,64,65,66,67,72,],[-38,48,-31,-34,-35,-36,-37,-39,-40,-42,48,48,-30,-32,-33,-41,]),'SOMA':([16,22,23,24,25,26,27,28,29,30,53,58,63,64,65,66,67,72,95,],[-38,45,-28,-31,-34,-35,-36,-37,-39,-40,45,-42,-27,-29,-30,-32,-33,-41,45,]),'SUBTRAIR':([16,22,23,24,25,26,27,28,29,30,53,58,63,64,65,66,67,72,95,],[-38,46,-28,-31,-34,-35,-36,-37,-39,-40,46,-42,-27,-29,-30,-32,-33,-41,46,]),'COMMA':([16,22,23,24,25,26,27,28,29,30,53,58,59,61,63,64,65,66,67,68,72,],[-38,-26,-28,-31,-34,-35,-36,-37,-39,-40,-25,-42,73,75,-27,-29,-30,-32,-33,77,-41,]),'IN':([56,],[71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,5,]),'funcdecl':([0,2,],[2,2,]),'signature':([0,2,],[3,3,]),'body':([3,17,70,76,86,88,90,],[6,40,78,84,91,93,96,]),'stms':([7,11,],[9,33,]),'stm':([7,11,88,],[11,11,94,]),'exp':([7,11,14,36,39,43,44,71,73,74,75,88,93,94,],[12,12,37,54,59,61,62,79,59,81,82,12,82,82,]),'exp1':([7,11,14,35,36,39,43,44,71,73,74,75,88,93,94,],[22,22,22,53,22,22,22,22,22,22,22,22,95,22,22,]),'exp2':([7,11,14,35,36,39,43,44,45,46,71,73,74,75,88,93,94,],[23,23,23,23,23,23,23,23,63,64,23,23,23,23,23,23,23,]),'exp3':([7,11,14,35,36,39,43,44,45,46,47,48,49,71,73,74,75,88,93,94,],[24,24,24,24,24,24,24,24,24,24,65,66,67,24,24,24,24,24,24,24,]),'exp4':([7,11,14,35,36,39,43,44,45,46,47,48,49,71,73,74,75,88,93,94,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'call':([7,11,14,35,36,39,43,44,45,46,47,48,49,71,73,74,75,88,93,94,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'sigparams':([31,77,],[51,85,]),'params':([39,73,],[57,80,]),'cases':([75,93,94,],[83,97,98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> funcdecl','program',1,'p_program','ExpressionLanguageParser.py',33),
  ('program -> funcdecl program','program',2,'p_program','ExpressionLanguageParser.py',34),
  ('funcdecl -> signature body','funcdecl',2,'p_funcdecl','ExpressionLanguageParser.py',39),
  ('signature -> ID ID LPAREN sigparams RPAREN','signature',5,'p_signature','ExpressionLanguageParser.py',43),
  ('signature -> ID ID LPAREN RPAREN','signature',4,'p_signature','ExpressionLanguageParser.py',44),
  ('sigparams -> ID ID','sigparams',2,'p_sigparams','ExpressionLanguageParser.py',48),
  ('sigparams -> ID ID COMMA sigparams','sigparams',4,'p_sigparams','ExpressionLanguageParser.py',49),
  ('body -> LCHAV stms RCHAV','body',3,'p_body','ExpressionLanguageParser.py',54),
  ('body -> LCHAV RCHAV','body',2,'p_body','ExpressionLanguageParser.py',55),
  ('stms -> stm','stms',1,'p_stms','ExpressionLanguageParser.py',59),
  ('stms -> stm stms','stms',2,'p_stms','ExpressionLanguageParser.py',60),
  ('stm -> exp PV','stm',2,'p_stm_exp','ExpressionLanguageParser.py',64),
  ('stm -> WHILE LPAREN exp RPAREN body','stm',5,'p_stm_while','ExpressionLanguageParser.py',68),
  ('stm -> RETURN exp PV','stm',3,'p_stm_return','ExpressionLanguageParser.py',72),
  ('stm -> FOR LPAREN ID IN exp RPAREN body','stm',7,'p_stm_for','ExpressionLanguageParser.py',76),
  ('stm -> REPEAT body WHILE LPAREN exp RPAREN PV','stm',7,'p_stm_repeat','ExpressionLanguageParser.py',80),
  ('stm -> BREAK PV','stm',2,'p_stm_break','ExpressionLanguageParser.py',84),
  ('stm -> NEXT PV','stm',2,'p_stm_next','ExpressionLanguageParser.py',88),
  ('stm -> SWITCH LPAREN exp COMMA cases RPAREN','stm',6,'p_stm_witch','ExpressionLanguageParser.py',92),
  ('cases -> exp IGUAL body','cases',3,'p_cases','ExpressionLanguageParser.py',96),
  ('cases -> exp IGUAL body cases','cases',4,'p_cases','ExpressionLanguageParser.py',97),
  ('cases -> exp IGUAL stm','cases',3,'p_cases','ExpressionLanguageParser.py',98),
  ('cases -> exp IGUAL stm cases','cases',4,'p_cases','ExpressionLanguageParser.py',99),
  ('stm -> IF LPAREN exp RPAREN body ELSE body','stm',7,'p_stm_if_else','ExpressionLanguageParser.py',104),
  ('exp -> exp IGUAL exp1','exp',3,'p_exp_assign','ExpressionLanguageParser.py',107),
  ('exp -> exp1','exp',1,'p_exp_assign','ExpressionLanguageParser.py',108),
  ('exp1 -> exp1 SOMA exp2','exp1',3,'p_exp1_soma','ExpressionLanguageParser.py',112),
  ('exp1 -> exp2','exp1',1,'p_exp1_soma','ExpressionLanguageParser.py',113),
  ('exp1 -> exp1 SUBTRAIR exp2','exp1',3,'p_exp1_menos','ExpressionLanguageParser.py',117),
  ('exp2 -> exp2 VEZES exp3','exp2',3,'p_exp2_vezes','ExpressionLanguageParser.py',121),
  ('exp2 -> exp3','exp2',1,'p_exp2_vezes','ExpressionLanguageParser.py',122),
  ('exp2 -> exp2 DIVIDIR exp3','exp2',3,'p_exp2_dividir','ExpressionLanguageParser.py',126),
  ('exp3 -> exp4 POT exp3','exp3',3,'p_exp3_pot','ExpressionLanguageParser.py',130),
  ('exp3 -> exp4','exp3',1,'p_exp3_pot','ExpressionLanguageParser.py',131),
  ('exp4 -> call','exp4',1,'p_exp4_call','ExpressionLanguageParser.py',135),
  ('exp4 -> NUMBER_INT','exp4',1,'p_exp4_call','ExpressionLanguageParser.py',136),
  ('exp4 -> NUMBER_FLOAT','exp4',1,'p_exp4_call','ExpressionLanguageParser.py',137),
  ('exp4 -> ID','exp4',1,'p_exp4_call','ExpressionLanguageParser.py',138),
  ('exp4 -> TRUE','exp4',1,'p_exp4_call','ExpressionLanguageParser.py',139),
  ('exp4 -> FALSE','exp4',1,'p_exp4_call','ExpressionLanguageParser.py',140),
  ('call -> ID LPAREN params RPAREN','call',4,'p_call_id_params','ExpressionLanguageParser.py',144),
  ('call -> ID LPAREN RPAREN','call',3,'p_call_id_params','ExpressionLanguageParser.py',145),
  ('params -> exp COMMA params','params',3,'p_params_ids','ExpressionLanguageParser.py',149),
  ('params -> exp','params',1,'p_params_ids','ExpressionLanguageParser.py',150),
]
