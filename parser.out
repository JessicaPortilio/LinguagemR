Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CALL
    CAT
    DEDENT
    FUNCTION
    IDENT
    INF
    LINHA
    MODULO
    NA
    NANA
    NA_CHARACTER_
    NA_COMPLEX
    NA_INTEGER_
    NA_REAL_
    NULL
    PASS

Grammar

Rule 0     S' -> program
Rule 1     program -> funcdecl
Rule 2     program -> funcdecl program
Rule 3     funcdecl -> signature body
Rule 4     signature -> DEF ID LPAREN sigparams RPAREN
Rule 5     signature -> DEF ID LPAREN RPAREN
Rule 6     signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL
Rule 7     signature -> DEF ID LPAREN RPAREN SEQUENCIAL
Rule 8     sigparams -> ID ID
Rule 9     sigparams -> ID ID COMMA sigparams
Rule 10    body -> LCHAV stms RCHAV
Rule 11    body -> LCHAV RCHAV
Rule 12    body -> stms
Rule 13    stms -> stm
Rule 14    stms -> stm stms
Rule 15    bodyORstm -> body
Rule 16    bodyORstm -> stm
Rule 17    stm -> exp PV
Rule 18    stm -> WHILE LPAREN exp RPAREN body
Rule 19    stm -> RETURN exp PV
Rule 20    stm -> FOR LPAREN ID IN exp RPAREN body
Rule 21    stm -> REPEAT body WHILE LPAREN exp RPAREN PV
Rule 22    stm -> BREAK PV
Rule 23    stm -> NEXT PV
Rule 24    stm -> SWITCH LPAREN exp COMMA cases RPAREN
Rule 25    stm -> SWITCH LPAREN exp COMMA casesnum RPAREN
Rule 26    cases -> exp IGUALAT exp
Rule 27    cases -> exp IGUALAT exp COMMA cases
Rule 28    casesnum -> exp
Rule 29    casesnum -> exp COMMA cases
Rule 30    stm -> IF LPAREN exp RPAREN bodyORstm
Rule 31    stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
Rule 32    stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
Rule 33    stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
Rule 34    stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
Rule 35    stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
Rule 36    exp -> exp IGUAL exp1
Rule 37    exp -> exp1
Rule 38    exp1 -> exp1 SOMA exp2
Rule 39    exp1 -> exp2
Rule 40    exp1 -> exp1 SUBTRAIR exp2
Rule 41    exp2 -> exp2 VEZES exp3
Rule 42    exp2 -> exp3
Rule 43    exp2 -> exp2 DIVIDIR exp3
Rule 44    exp3 -> exp4 POT exp3
Rule 45    exp3 -> exp4
Rule 46    exp4 -> exp4 MAIOR exp5
Rule 47    exp4 -> exp5
Rule 48    exp5 -> exp5 MENOR exp6
Rule 49    exp5 -> exp6
Rule 50    exp6 -> exp6 MAIORIGUAL exp7
Rule 51    exp6 -> exp7
Rule 52    exp7 -> exp7 MENORIGUAL exp8
Rule 53    exp7 -> exp8
Rule 54    exp8 -> exp8 DIFERENTE exp9
Rule 55    exp8 -> exp9
Rule 56    exp9 -> exp9 ANDVETOR exp10
Rule 57    exp9 -> exp10
Rule 58    exp10 -> exp10 AND exp11
Rule 59    exp10 -> exp11
Rule 60    exp11 -> exp11 ORVETOR exp12
Rule 61    exp11 -> exp12
Rule 62    exp12 -> exp12 OR exp13
Rule 63    exp12 -> exp13
Rule 64    exp13 -> exp13 NOTLOGICO exp14
Rule 65    exp13 -> exp14
Rule 66    exp14 -> exp14 XOR exp15
Rule 67    exp14 -> exp15
Rule 68    exp15 -> call
Rule 69    exp15 -> NUMBER_INT
Rule 70    exp15 -> NUMBER_FLOAT
Rule 71    exp15 -> ID
Rule 72    exp15 -> TRUE
Rule 73    exp15 -> FALSE
Rule 74    call -> ID LPAREN params RPAREN
Rule 75    call -> ID LPAREN RPAREN
Rule 76    params -> exp COMMA params
Rule 77    params -> exp

Terminals, with rules where they appear

AND                  : 58
ANDVETOR             : 56
BREAK                : 22
CALL                 : 
CAT                  : 
COMMA                : 9 24 25 27 29 76
DEDENT               : 
DEF                  : 4 5 6 7
DIFERENTE            : 54
DIVIDIR              : 43
ELSE                 : 32 33 34 35
FALSE                : 73
FOR                  : 20
FUNCTION             : 
ID                   : 4 5 6 7 8 8 9 9 20 71 74 75
IDENT                : 
IF                   : 30 31 32 33 34 35
IGUAL                : 36
IGUALAT              : 26 27
IN                   : 20
INF                  : 
LCHAV                : 10 11
LINHA                : 
LPAREN               : 4 5 6 7 18 20 21 24 25 30 31 32 33 34 35 74 75
MAIOR                : 46
MAIORIGUAL           : 50
MENOR                : 48
MENORIGUAL           : 52
MODULO               : 
NA                   : 
NANA                 : 
NA_CHARACTER_        : 
NA_COMPLEX           : 
NA_INTEGER_          : 
NA_REAL_             : 
NEXT                 : 23
NOTLOGICO            : 64
NULL                 : 
NUMBER_FLOAT         : 70
NUMBER_INT           : 69
OR                   : 62
ORVETOR              : 60
PASS                 : 
POT                  : 44
PV                   : 17 19 21 22 23
RCHAV                : 10 11
REPEAT               : 21
RETURN               : 19
RPAREN               : 4 5 6 7 18 20 21 24 25 30 31 32 33 34 35 74 75
SEQUENCIAL           : 6 7 31 33 34 34 35
SOMA                 : 38
SUBTRAIR             : 40
SWITCH               : 24 25
TRUE                 : 72
VEZES                : 41
WHILE                : 18 21
XOR                  : 66
error                : 

Nonterminals, with rules where they appear

body                 : 3 15 18 20 21
bodyORstm            : 30 31 32 32 33 33 34 34 35 35
call                 : 68
cases                : 24 27 29
casesnum             : 25
exp                  : 17 18 19 20 21 24 25 26 26 27 27 28 29 30 31 32 33 34 35 36 76 77
exp1                 : 36 37 38 40
exp10                : 56 57 58
exp11                : 58 59 60
exp12                : 60 61 62
exp13                : 62 63 64
exp14                : 64 65 66
exp15                : 66 67
exp2                 : 38 39 40 41 43
exp3                 : 41 42 43 44
exp4                 : 44 45 46
exp5                 : 46 47 48
exp6                 : 48 49 50
exp7                 : 50 51 52
exp8                 : 52 53 54
exp9                 : 54 55 56
funcdecl             : 1 2
params               : 74 76
program              : 2 0
signature            : 3
sigparams            : 4 6 9
stm                  : 13 14 16
stms                 : 10 12 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . funcdecl
    (2) program -> . funcdecl program
    (3) funcdecl -> . signature body
    (4) signature -> . DEF ID LPAREN sigparams RPAREN
    (5) signature -> . DEF ID LPAREN RPAREN
    (6) signature -> . DEF ID LPAREN sigparams RPAREN SEQUENCIAL
    (7) signature -> . DEF ID LPAREN RPAREN SEQUENCIAL

    DEF             shift and go to state 4

    program                        shift and go to state 1
    funcdecl                       shift and go to state 2
    signature                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> funcdecl .
    (2) program -> funcdecl . program
    (1) program -> . funcdecl
    (2) program -> . funcdecl program
    (3) funcdecl -> . signature body
    (4) signature -> . DEF ID LPAREN sigparams RPAREN
    (5) signature -> . DEF ID LPAREN RPAREN
    (6) signature -> . DEF ID LPAREN sigparams RPAREN SEQUENCIAL
    (7) signature -> . DEF ID LPAREN RPAREN SEQUENCIAL

    $end            reduce using rule 1 (program -> funcdecl .)
    DEF             shift and go to state 4

    funcdecl                       shift and go to state 2
    program                        shift and go to state 5
    signature                      shift and go to state 3

state 3

    (3) funcdecl -> signature . body
    (10) body -> . LCHAV stms RCHAV
    (11) body -> . LCHAV RCHAV
    (12) body -> . stms
    (13) stms -> . stm
    (14) stms -> . stm stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    LCHAV           shift and go to state 7
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    body                           shift and go to state 6
    stms                           shift and go to state 8
    stm                            shift and go to state 9
    exp                            shift and go to state 10
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 4

    (4) signature -> DEF . ID LPAREN sigparams RPAREN
    (5) signature -> DEF . ID LPAREN RPAREN
    (6) signature -> DEF . ID LPAREN sigparams RPAREN SEQUENCIAL
    (7) signature -> DEF . ID LPAREN RPAREN SEQUENCIAL

    ID              shift and go to state 40


state 5

    (2) program -> funcdecl program .

    $end            reduce using rule 2 (program -> funcdecl program .)


state 6

    (3) funcdecl -> signature body .

    DEF             reduce using rule 3 (funcdecl -> signature body .)
    $end            reduce using rule 3 (funcdecl -> signature body .)


state 7

    (10) body -> LCHAV . stms RCHAV
    (11) body -> LCHAV . RCHAV
    (13) stms -> . stm
    (14) stms -> . stm stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    RCHAV           shift and go to state 42
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    stms                           shift and go to state 41
    stm                            shift and go to state 9
    exp                            shift and go to state 10
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 8

    (12) body -> stms .

    DEF             reduce using rule 12 (body -> stms .)
    $end            reduce using rule 12 (body -> stms .)
    WHILE           reduce using rule 12 (body -> stms .)
    RCHAV           reduce using rule 12 (body -> stms .)
    RETURN          reduce using rule 12 (body -> stms .)
    FOR             reduce using rule 12 (body -> stms .)
    REPEAT          reduce using rule 12 (body -> stms .)
    BREAK           reduce using rule 12 (body -> stms .)
    NEXT            reduce using rule 12 (body -> stms .)
    SWITCH          reduce using rule 12 (body -> stms .)
    IF              reduce using rule 12 (body -> stms .)
    NUMBER_INT      reduce using rule 12 (body -> stms .)
    NUMBER_FLOAT    reduce using rule 12 (body -> stms .)
    ID              reduce using rule 12 (body -> stms .)
    TRUE            reduce using rule 12 (body -> stms .)
    FALSE           reduce using rule 12 (body -> stms .)
    ELSE            reduce using rule 12 (body -> stms .)


state 9

    (13) stms -> stm .
    (14) stms -> stm . stms
    (13) stms -> . stm
    (14) stms -> . stm stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for NUMBER_INT resolved as shift
  ! shift/reduce conflict for NUMBER_FLOAT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    DEF             reduce using rule 13 (stms -> stm .)
    $end            reduce using rule 13 (stms -> stm .)
    RCHAV           reduce using rule 13 (stms -> stm .)
    ELSE            reduce using rule 13 (stms -> stm .)
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

  ! WHILE           [ reduce using rule 13 (stms -> stm .) ]
  ! RETURN          [ reduce using rule 13 (stms -> stm .) ]
  ! FOR             [ reduce using rule 13 (stms -> stm .) ]
  ! REPEAT          [ reduce using rule 13 (stms -> stm .) ]
  ! BREAK           [ reduce using rule 13 (stms -> stm .) ]
  ! NEXT            [ reduce using rule 13 (stms -> stm .) ]
  ! SWITCH          [ reduce using rule 13 (stms -> stm .) ]
  ! IF              [ reduce using rule 13 (stms -> stm .) ]
  ! NUMBER_INT      [ reduce using rule 13 (stms -> stm .) ]
  ! NUMBER_FLOAT    [ reduce using rule 13 (stms -> stm .) ]
  ! ID              [ reduce using rule 13 (stms -> stm .) ]
  ! TRUE            [ reduce using rule 13 (stms -> stm .) ]
  ! FALSE           [ reduce using rule 13 (stms -> stm .) ]

    stm                            shift and go to state 9
    stms                           shift and go to state 43
    exp                            shift and go to state 10
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 10

    (17) stm -> exp . PV
    (36) exp -> exp . IGUAL exp1

    PV              shift and go to state 44
    IGUAL           shift and go to state 45


state 11

    (18) stm -> WHILE . LPAREN exp RPAREN body

    LPAREN          shift and go to state 46


state 12

    (19) stm -> RETURN . exp PV
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 47
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 13

    (20) stm -> FOR . LPAREN ID IN exp RPAREN body

    LPAREN          shift and go to state 48


state 14

    (71) exp15 -> ID .
    (74) call -> ID . LPAREN params RPAREN
    (75) call -> ID . LPAREN RPAREN

    XOR             reduce using rule 71 (exp15 -> ID .)
    NOTLOGICO       reduce using rule 71 (exp15 -> ID .)
    OR              reduce using rule 71 (exp15 -> ID .)
    ORVETOR         reduce using rule 71 (exp15 -> ID .)
    AND             reduce using rule 71 (exp15 -> ID .)
    ANDVETOR        reduce using rule 71 (exp15 -> ID .)
    DIFERENTE       reduce using rule 71 (exp15 -> ID .)
    MENORIGUAL      reduce using rule 71 (exp15 -> ID .)
    MAIORIGUAL      reduce using rule 71 (exp15 -> ID .)
    MENOR           reduce using rule 71 (exp15 -> ID .)
    POT             reduce using rule 71 (exp15 -> ID .)
    MAIOR           reduce using rule 71 (exp15 -> ID .)
    VEZES           reduce using rule 71 (exp15 -> ID .)
    DIVIDIR         reduce using rule 71 (exp15 -> ID .)
    SOMA            reduce using rule 71 (exp15 -> ID .)
    SUBTRAIR        reduce using rule 71 (exp15 -> ID .)
    PV              reduce using rule 71 (exp15 -> ID .)
    IGUAL           reduce using rule 71 (exp15 -> ID .)
    RPAREN          reduce using rule 71 (exp15 -> ID .)
    COMMA           reduce using rule 71 (exp15 -> ID .)
    IGUALAT         reduce using rule 71 (exp15 -> ID .)
    LPAREN          shift and go to state 49


state 15

    (21) stm -> REPEAT . body WHILE LPAREN exp RPAREN PV
    (10) body -> . LCHAV stms RCHAV
    (11) body -> . LCHAV RCHAV
    (12) body -> . stms
    (13) stms -> . stm
    (14) stms -> . stm stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    LCHAV           shift and go to state 7
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    body                           shift and go to state 50
    exp                            shift and go to state 10
    stms                           shift and go to state 8
    stm                            shift and go to state 9
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 16

    (22) stm -> BREAK . PV

    PV              shift and go to state 51


state 17

    (23) stm -> NEXT . PV

    PV              shift and go to state 52


state 18

    (24) stm -> SWITCH . LPAREN exp COMMA cases RPAREN
    (25) stm -> SWITCH . LPAREN exp COMMA casesnum RPAREN

    LPAREN          shift and go to state 53


state 19

    (30) stm -> IF . LPAREN exp RPAREN bodyORstm
    (31) stm -> IF . LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> IF . LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> IF . LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> IF . LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> IF . LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm

    LPAREN          shift and go to state 54


state 20

    (37) exp -> exp1 .
    (38) exp1 -> exp1 . SOMA exp2
    (40) exp1 -> exp1 . SUBTRAIR exp2

    PV              reduce using rule 37 (exp -> exp1 .)
    IGUAL           reduce using rule 37 (exp -> exp1 .)
    RPAREN          reduce using rule 37 (exp -> exp1 .)
    COMMA           reduce using rule 37 (exp -> exp1 .)
    IGUALAT         reduce using rule 37 (exp -> exp1 .)
    SOMA            shift and go to state 55
    SUBTRAIR        shift and go to state 56


state 21

    (39) exp1 -> exp2 .
    (41) exp2 -> exp2 . VEZES exp3
    (43) exp2 -> exp2 . DIVIDIR exp3

    SOMA            reduce using rule 39 (exp1 -> exp2 .)
    SUBTRAIR        reduce using rule 39 (exp1 -> exp2 .)
    PV              reduce using rule 39 (exp1 -> exp2 .)
    IGUAL           reduce using rule 39 (exp1 -> exp2 .)
    RPAREN          reduce using rule 39 (exp1 -> exp2 .)
    COMMA           reduce using rule 39 (exp1 -> exp2 .)
    IGUALAT         reduce using rule 39 (exp1 -> exp2 .)
    VEZES           shift and go to state 57
    DIVIDIR         shift and go to state 58


state 22

    (42) exp2 -> exp3 .

    VEZES           reduce using rule 42 (exp2 -> exp3 .)
    DIVIDIR         reduce using rule 42 (exp2 -> exp3 .)
    SOMA            reduce using rule 42 (exp2 -> exp3 .)
    SUBTRAIR        reduce using rule 42 (exp2 -> exp3 .)
    PV              reduce using rule 42 (exp2 -> exp3 .)
    IGUAL           reduce using rule 42 (exp2 -> exp3 .)
    RPAREN          reduce using rule 42 (exp2 -> exp3 .)
    COMMA           reduce using rule 42 (exp2 -> exp3 .)
    IGUALAT         reduce using rule 42 (exp2 -> exp3 .)


state 23

    (44) exp3 -> exp4 . POT exp3
    (45) exp3 -> exp4 .
    (46) exp4 -> exp4 . MAIOR exp5

    POT             shift and go to state 59
    VEZES           reduce using rule 45 (exp3 -> exp4 .)
    DIVIDIR         reduce using rule 45 (exp3 -> exp4 .)
    SOMA            reduce using rule 45 (exp3 -> exp4 .)
    SUBTRAIR        reduce using rule 45 (exp3 -> exp4 .)
    PV              reduce using rule 45 (exp3 -> exp4 .)
    IGUAL           reduce using rule 45 (exp3 -> exp4 .)
    RPAREN          reduce using rule 45 (exp3 -> exp4 .)
    COMMA           reduce using rule 45 (exp3 -> exp4 .)
    IGUALAT         reduce using rule 45 (exp3 -> exp4 .)
    MAIOR           shift and go to state 60


state 24

    (47) exp4 -> exp5 .
    (48) exp5 -> exp5 . MENOR exp6

    POT             reduce using rule 47 (exp4 -> exp5 .)
    MAIOR           reduce using rule 47 (exp4 -> exp5 .)
    VEZES           reduce using rule 47 (exp4 -> exp5 .)
    DIVIDIR         reduce using rule 47 (exp4 -> exp5 .)
    SOMA            reduce using rule 47 (exp4 -> exp5 .)
    SUBTRAIR        reduce using rule 47 (exp4 -> exp5 .)
    PV              reduce using rule 47 (exp4 -> exp5 .)
    IGUAL           reduce using rule 47 (exp4 -> exp5 .)
    RPAREN          reduce using rule 47 (exp4 -> exp5 .)
    COMMA           reduce using rule 47 (exp4 -> exp5 .)
    IGUALAT         reduce using rule 47 (exp4 -> exp5 .)
    MENOR           shift and go to state 61


state 25

    (49) exp5 -> exp6 .
    (50) exp6 -> exp6 . MAIORIGUAL exp7

    MENOR           reduce using rule 49 (exp5 -> exp6 .)
    POT             reduce using rule 49 (exp5 -> exp6 .)
    MAIOR           reduce using rule 49 (exp5 -> exp6 .)
    VEZES           reduce using rule 49 (exp5 -> exp6 .)
    DIVIDIR         reduce using rule 49 (exp5 -> exp6 .)
    SOMA            reduce using rule 49 (exp5 -> exp6 .)
    SUBTRAIR        reduce using rule 49 (exp5 -> exp6 .)
    PV              reduce using rule 49 (exp5 -> exp6 .)
    IGUAL           reduce using rule 49 (exp5 -> exp6 .)
    RPAREN          reduce using rule 49 (exp5 -> exp6 .)
    COMMA           reduce using rule 49 (exp5 -> exp6 .)
    IGUALAT         reduce using rule 49 (exp5 -> exp6 .)
    MAIORIGUAL      shift and go to state 62


state 26

    (51) exp6 -> exp7 .
    (52) exp7 -> exp7 . MENORIGUAL exp8

    MAIORIGUAL      reduce using rule 51 (exp6 -> exp7 .)
    MENOR           reduce using rule 51 (exp6 -> exp7 .)
    POT             reduce using rule 51 (exp6 -> exp7 .)
    MAIOR           reduce using rule 51 (exp6 -> exp7 .)
    VEZES           reduce using rule 51 (exp6 -> exp7 .)
    DIVIDIR         reduce using rule 51 (exp6 -> exp7 .)
    SOMA            reduce using rule 51 (exp6 -> exp7 .)
    SUBTRAIR        reduce using rule 51 (exp6 -> exp7 .)
    PV              reduce using rule 51 (exp6 -> exp7 .)
    IGUAL           reduce using rule 51 (exp6 -> exp7 .)
    RPAREN          reduce using rule 51 (exp6 -> exp7 .)
    COMMA           reduce using rule 51 (exp6 -> exp7 .)
    IGUALAT         reduce using rule 51 (exp6 -> exp7 .)
    MENORIGUAL      shift and go to state 63


state 27

    (53) exp7 -> exp8 .
    (54) exp8 -> exp8 . DIFERENTE exp9

    MENORIGUAL      reduce using rule 53 (exp7 -> exp8 .)
    MAIORIGUAL      reduce using rule 53 (exp7 -> exp8 .)
    MENOR           reduce using rule 53 (exp7 -> exp8 .)
    POT             reduce using rule 53 (exp7 -> exp8 .)
    MAIOR           reduce using rule 53 (exp7 -> exp8 .)
    VEZES           reduce using rule 53 (exp7 -> exp8 .)
    DIVIDIR         reduce using rule 53 (exp7 -> exp8 .)
    SOMA            reduce using rule 53 (exp7 -> exp8 .)
    SUBTRAIR        reduce using rule 53 (exp7 -> exp8 .)
    PV              reduce using rule 53 (exp7 -> exp8 .)
    IGUAL           reduce using rule 53 (exp7 -> exp8 .)
    RPAREN          reduce using rule 53 (exp7 -> exp8 .)
    COMMA           reduce using rule 53 (exp7 -> exp8 .)
    IGUALAT         reduce using rule 53 (exp7 -> exp8 .)
    DIFERENTE       shift and go to state 64


state 28

    (55) exp8 -> exp9 .
    (56) exp9 -> exp9 . ANDVETOR exp10

    DIFERENTE       reduce using rule 55 (exp8 -> exp9 .)
    MENORIGUAL      reduce using rule 55 (exp8 -> exp9 .)
    MAIORIGUAL      reduce using rule 55 (exp8 -> exp9 .)
    MENOR           reduce using rule 55 (exp8 -> exp9 .)
    POT             reduce using rule 55 (exp8 -> exp9 .)
    MAIOR           reduce using rule 55 (exp8 -> exp9 .)
    VEZES           reduce using rule 55 (exp8 -> exp9 .)
    DIVIDIR         reduce using rule 55 (exp8 -> exp9 .)
    SOMA            reduce using rule 55 (exp8 -> exp9 .)
    SUBTRAIR        reduce using rule 55 (exp8 -> exp9 .)
    PV              reduce using rule 55 (exp8 -> exp9 .)
    IGUAL           reduce using rule 55 (exp8 -> exp9 .)
    RPAREN          reduce using rule 55 (exp8 -> exp9 .)
    COMMA           reduce using rule 55 (exp8 -> exp9 .)
    IGUALAT         reduce using rule 55 (exp8 -> exp9 .)
    ANDVETOR        shift and go to state 65


state 29

    (57) exp9 -> exp10 .
    (58) exp10 -> exp10 . AND exp11

    ANDVETOR        reduce using rule 57 (exp9 -> exp10 .)
    DIFERENTE       reduce using rule 57 (exp9 -> exp10 .)
    MENORIGUAL      reduce using rule 57 (exp9 -> exp10 .)
    MAIORIGUAL      reduce using rule 57 (exp9 -> exp10 .)
    MENOR           reduce using rule 57 (exp9 -> exp10 .)
    POT             reduce using rule 57 (exp9 -> exp10 .)
    MAIOR           reduce using rule 57 (exp9 -> exp10 .)
    VEZES           reduce using rule 57 (exp9 -> exp10 .)
    DIVIDIR         reduce using rule 57 (exp9 -> exp10 .)
    SOMA            reduce using rule 57 (exp9 -> exp10 .)
    SUBTRAIR        reduce using rule 57 (exp9 -> exp10 .)
    PV              reduce using rule 57 (exp9 -> exp10 .)
    IGUAL           reduce using rule 57 (exp9 -> exp10 .)
    RPAREN          reduce using rule 57 (exp9 -> exp10 .)
    COMMA           reduce using rule 57 (exp9 -> exp10 .)
    IGUALAT         reduce using rule 57 (exp9 -> exp10 .)
    AND             shift and go to state 66


state 30

    (59) exp10 -> exp11 .
    (60) exp11 -> exp11 . ORVETOR exp12

    AND             reduce using rule 59 (exp10 -> exp11 .)
    ANDVETOR        reduce using rule 59 (exp10 -> exp11 .)
    DIFERENTE       reduce using rule 59 (exp10 -> exp11 .)
    MENORIGUAL      reduce using rule 59 (exp10 -> exp11 .)
    MAIORIGUAL      reduce using rule 59 (exp10 -> exp11 .)
    MENOR           reduce using rule 59 (exp10 -> exp11 .)
    POT             reduce using rule 59 (exp10 -> exp11 .)
    MAIOR           reduce using rule 59 (exp10 -> exp11 .)
    VEZES           reduce using rule 59 (exp10 -> exp11 .)
    DIVIDIR         reduce using rule 59 (exp10 -> exp11 .)
    SOMA            reduce using rule 59 (exp10 -> exp11 .)
    SUBTRAIR        reduce using rule 59 (exp10 -> exp11 .)
    PV              reduce using rule 59 (exp10 -> exp11 .)
    IGUAL           reduce using rule 59 (exp10 -> exp11 .)
    RPAREN          reduce using rule 59 (exp10 -> exp11 .)
    COMMA           reduce using rule 59 (exp10 -> exp11 .)
    IGUALAT         reduce using rule 59 (exp10 -> exp11 .)
    ORVETOR         shift and go to state 67


state 31

    (61) exp11 -> exp12 .
    (62) exp12 -> exp12 . OR exp13

    ORVETOR         reduce using rule 61 (exp11 -> exp12 .)
    AND             reduce using rule 61 (exp11 -> exp12 .)
    ANDVETOR        reduce using rule 61 (exp11 -> exp12 .)
    DIFERENTE       reduce using rule 61 (exp11 -> exp12 .)
    MENORIGUAL      reduce using rule 61 (exp11 -> exp12 .)
    MAIORIGUAL      reduce using rule 61 (exp11 -> exp12 .)
    MENOR           reduce using rule 61 (exp11 -> exp12 .)
    POT             reduce using rule 61 (exp11 -> exp12 .)
    MAIOR           reduce using rule 61 (exp11 -> exp12 .)
    VEZES           reduce using rule 61 (exp11 -> exp12 .)
    DIVIDIR         reduce using rule 61 (exp11 -> exp12 .)
    SOMA            reduce using rule 61 (exp11 -> exp12 .)
    SUBTRAIR        reduce using rule 61 (exp11 -> exp12 .)
    PV              reduce using rule 61 (exp11 -> exp12 .)
    IGUAL           reduce using rule 61 (exp11 -> exp12 .)
    RPAREN          reduce using rule 61 (exp11 -> exp12 .)
    COMMA           reduce using rule 61 (exp11 -> exp12 .)
    IGUALAT         reduce using rule 61 (exp11 -> exp12 .)
    OR              shift and go to state 68


state 32

    (63) exp12 -> exp13 .
    (64) exp13 -> exp13 . NOTLOGICO exp14

    OR              reduce using rule 63 (exp12 -> exp13 .)
    ORVETOR         reduce using rule 63 (exp12 -> exp13 .)
    AND             reduce using rule 63 (exp12 -> exp13 .)
    ANDVETOR        reduce using rule 63 (exp12 -> exp13 .)
    DIFERENTE       reduce using rule 63 (exp12 -> exp13 .)
    MENORIGUAL      reduce using rule 63 (exp12 -> exp13 .)
    MAIORIGUAL      reduce using rule 63 (exp12 -> exp13 .)
    MENOR           reduce using rule 63 (exp12 -> exp13 .)
    POT             reduce using rule 63 (exp12 -> exp13 .)
    MAIOR           reduce using rule 63 (exp12 -> exp13 .)
    VEZES           reduce using rule 63 (exp12 -> exp13 .)
    DIVIDIR         reduce using rule 63 (exp12 -> exp13 .)
    SOMA            reduce using rule 63 (exp12 -> exp13 .)
    SUBTRAIR        reduce using rule 63 (exp12 -> exp13 .)
    PV              reduce using rule 63 (exp12 -> exp13 .)
    IGUAL           reduce using rule 63 (exp12 -> exp13 .)
    RPAREN          reduce using rule 63 (exp12 -> exp13 .)
    COMMA           reduce using rule 63 (exp12 -> exp13 .)
    IGUALAT         reduce using rule 63 (exp12 -> exp13 .)
    NOTLOGICO       shift and go to state 69


state 33

    (65) exp13 -> exp14 .
    (66) exp14 -> exp14 . XOR exp15

    NOTLOGICO       reduce using rule 65 (exp13 -> exp14 .)
    OR              reduce using rule 65 (exp13 -> exp14 .)
    ORVETOR         reduce using rule 65 (exp13 -> exp14 .)
    AND             reduce using rule 65 (exp13 -> exp14 .)
    ANDVETOR        reduce using rule 65 (exp13 -> exp14 .)
    DIFERENTE       reduce using rule 65 (exp13 -> exp14 .)
    MENORIGUAL      reduce using rule 65 (exp13 -> exp14 .)
    MAIORIGUAL      reduce using rule 65 (exp13 -> exp14 .)
    MENOR           reduce using rule 65 (exp13 -> exp14 .)
    POT             reduce using rule 65 (exp13 -> exp14 .)
    MAIOR           reduce using rule 65 (exp13 -> exp14 .)
    VEZES           reduce using rule 65 (exp13 -> exp14 .)
    DIVIDIR         reduce using rule 65 (exp13 -> exp14 .)
    SOMA            reduce using rule 65 (exp13 -> exp14 .)
    SUBTRAIR        reduce using rule 65 (exp13 -> exp14 .)
    PV              reduce using rule 65 (exp13 -> exp14 .)
    IGUAL           reduce using rule 65 (exp13 -> exp14 .)
    RPAREN          reduce using rule 65 (exp13 -> exp14 .)
    COMMA           reduce using rule 65 (exp13 -> exp14 .)
    IGUALAT         reduce using rule 65 (exp13 -> exp14 .)
    XOR             shift and go to state 70


state 34

    (67) exp14 -> exp15 .

    XOR             reduce using rule 67 (exp14 -> exp15 .)
    NOTLOGICO       reduce using rule 67 (exp14 -> exp15 .)
    OR              reduce using rule 67 (exp14 -> exp15 .)
    ORVETOR         reduce using rule 67 (exp14 -> exp15 .)
    AND             reduce using rule 67 (exp14 -> exp15 .)
    ANDVETOR        reduce using rule 67 (exp14 -> exp15 .)
    DIFERENTE       reduce using rule 67 (exp14 -> exp15 .)
    MENORIGUAL      reduce using rule 67 (exp14 -> exp15 .)
    MAIORIGUAL      reduce using rule 67 (exp14 -> exp15 .)
    MENOR           reduce using rule 67 (exp14 -> exp15 .)
    POT             reduce using rule 67 (exp14 -> exp15 .)
    MAIOR           reduce using rule 67 (exp14 -> exp15 .)
    VEZES           reduce using rule 67 (exp14 -> exp15 .)
    DIVIDIR         reduce using rule 67 (exp14 -> exp15 .)
    SOMA            reduce using rule 67 (exp14 -> exp15 .)
    SUBTRAIR        reduce using rule 67 (exp14 -> exp15 .)
    PV              reduce using rule 67 (exp14 -> exp15 .)
    IGUAL           reduce using rule 67 (exp14 -> exp15 .)
    RPAREN          reduce using rule 67 (exp14 -> exp15 .)
    COMMA           reduce using rule 67 (exp14 -> exp15 .)
    IGUALAT         reduce using rule 67 (exp14 -> exp15 .)


state 35

    (68) exp15 -> call .

    XOR             reduce using rule 68 (exp15 -> call .)
    NOTLOGICO       reduce using rule 68 (exp15 -> call .)
    OR              reduce using rule 68 (exp15 -> call .)
    ORVETOR         reduce using rule 68 (exp15 -> call .)
    AND             reduce using rule 68 (exp15 -> call .)
    ANDVETOR        reduce using rule 68 (exp15 -> call .)
    DIFERENTE       reduce using rule 68 (exp15 -> call .)
    MENORIGUAL      reduce using rule 68 (exp15 -> call .)
    MAIORIGUAL      reduce using rule 68 (exp15 -> call .)
    MENOR           reduce using rule 68 (exp15 -> call .)
    POT             reduce using rule 68 (exp15 -> call .)
    MAIOR           reduce using rule 68 (exp15 -> call .)
    VEZES           reduce using rule 68 (exp15 -> call .)
    DIVIDIR         reduce using rule 68 (exp15 -> call .)
    SOMA            reduce using rule 68 (exp15 -> call .)
    SUBTRAIR        reduce using rule 68 (exp15 -> call .)
    PV              reduce using rule 68 (exp15 -> call .)
    IGUAL           reduce using rule 68 (exp15 -> call .)
    RPAREN          reduce using rule 68 (exp15 -> call .)
    COMMA           reduce using rule 68 (exp15 -> call .)
    IGUALAT         reduce using rule 68 (exp15 -> call .)


state 36

    (69) exp15 -> NUMBER_INT .

    XOR             reduce using rule 69 (exp15 -> NUMBER_INT .)
    NOTLOGICO       reduce using rule 69 (exp15 -> NUMBER_INT .)
    OR              reduce using rule 69 (exp15 -> NUMBER_INT .)
    ORVETOR         reduce using rule 69 (exp15 -> NUMBER_INT .)
    AND             reduce using rule 69 (exp15 -> NUMBER_INT .)
    ANDVETOR        reduce using rule 69 (exp15 -> NUMBER_INT .)
    DIFERENTE       reduce using rule 69 (exp15 -> NUMBER_INT .)
    MENORIGUAL      reduce using rule 69 (exp15 -> NUMBER_INT .)
    MAIORIGUAL      reduce using rule 69 (exp15 -> NUMBER_INT .)
    MENOR           reduce using rule 69 (exp15 -> NUMBER_INT .)
    POT             reduce using rule 69 (exp15 -> NUMBER_INT .)
    MAIOR           reduce using rule 69 (exp15 -> NUMBER_INT .)
    VEZES           reduce using rule 69 (exp15 -> NUMBER_INT .)
    DIVIDIR         reduce using rule 69 (exp15 -> NUMBER_INT .)
    SOMA            reduce using rule 69 (exp15 -> NUMBER_INT .)
    SUBTRAIR        reduce using rule 69 (exp15 -> NUMBER_INT .)
    PV              reduce using rule 69 (exp15 -> NUMBER_INT .)
    IGUAL           reduce using rule 69 (exp15 -> NUMBER_INT .)
    RPAREN          reduce using rule 69 (exp15 -> NUMBER_INT .)
    COMMA           reduce using rule 69 (exp15 -> NUMBER_INT .)
    IGUALAT         reduce using rule 69 (exp15 -> NUMBER_INT .)


state 37

    (70) exp15 -> NUMBER_FLOAT .

    XOR             reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    NOTLOGICO       reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    OR              reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    ORVETOR         reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    AND             reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    ANDVETOR        reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    DIFERENTE       reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    MENORIGUAL      reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    MAIORIGUAL      reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    MENOR           reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    POT             reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    MAIOR           reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    VEZES           reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    DIVIDIR         reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    SOMA            reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    SUBTRAIR        reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    PV              reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    IGUAL           reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    RPAREN          reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    COMMA           reduce using rule 70 (exp15 -> NUMBER_FLOAT .)
    IGUALAT         reduce using rule 70 (exp15 -> NUMBER_FLOAT .)


state 38

    (72) exp15 -> TRUE .

    XOR             reduce using rule 72 (exp15 -> TRUE .)
    NOTLOGICO       reduce using rule 72 (exp15 -> TRUE .)
    OR              reduce using rule 72 (exp15 -> TRUE .)
    ORVETOR         reduce using rule 72 (exp15 -> TRUE .)
    AND             reduce using rule 72 (exp15 -> TRUE .)
    ANDVETOR        reduce using rule 72 (exp15 -> TRUE .)
    DIFERENTE       reduce using rule 72 (exp15 -> TRUE .)
    MENORIGUAL      reduce using rule 72 (exp15 -> TRUE .)
    MAIORIGUAL      reduce using rule 72 (exp15 -> TRUE .)
    MENOR           reduce using rule 72 (exp15 -> TRUE .)
    POT             reduce using rule 72 (exp15 -> TRUE .)
    MAIOR           reduce using rule 72 (exp15 -> TRUE .)
    VEZES           reduce using rule 72 (exp15 -> TRUE .)
    DIVIDIR         reduce using rule 72 (exp15 -> TRUE .)
    SOMA            reduce using rule 72 (exp15 -> TRUE .)
    SUBTRAIR        reduce using rule 72 (exp15 -> TRUE .)
    PV              reduce using rule 72 (exp15 -> TRUE .)
    IGUAL           reduce using rule 72 (exp15 -> TRUE .)
    RPAREN          reduce using rule 72 (exp15 -> TRUE .)
    COMMA           reduce using rule 72 (exp15 -> TRUE .)
    IGUALAT         reduce using rule 72 (exp15 -> TRUE .)


state 39

    (73) exp15 -> FALSE .

    XOR             reduce using rule 73 (exp15 -> FALSE .)
    NOTLOGICO       reduce using rule 73 (exp15 -> FALSE .)
    OR              reduce using rule 73 (exp15 -> FALSE .)
    ORVETOR         reduce using rule 73 (exp15 -> FALSE .)
    AND             reduce using rule 73 (exp15 -> FALSE .)
    ANDVETOR        reduce using rule 73 (exp15 -> FALSE .)
    DIFERENTE       reduce using rule 73 (exp15 -> FALSE .)
    MENORIGUAL      reduce using rule 73 (exp15 -> FALSE .)
    MAIORIGUAL      reduce using rule 73 (exp15 -> FALSE .)
    MENOR           reduce using rule 73 (exp15 -> FALSE .)
    POT             reduce using rule 73 (exp15 -> FALSE .)
    MAIOR           reduce using rule 73 (exp15 -> FALSE .)
    VEZES           reduce using rule 73 (exp15 -> FALSE .)
    DIVIDIR         reduce using rule 73 (exp15 -> FALSE .)
    SOMA            reduce using rule 73 (exp15 -> FALSE .)
    SUBTRAIR        reduce using rule 73 (exp15 -> FALSE .)
    PV              reduce using rule 73 (exp15 -> FALSE .)
    IGUAL           reduce using rule 73 (exp15 -> FALSE .)
    RPAREN          reduce using rule 73 (exp15 -> FALSE .)
    COMMA           reduce using rule 73 (exp15 -> FALSE .)
    IGUALAT         reduce using rule 73 (exp15 -> FALSE .)


state 40

    (4) signature -> DEF ID . LPAREN sigparams RPAREN
    (5) signature -> DEF ID . LPAREN RPAREN
    (6) signature -> DEF ID . LPAREN sigparams RPAREN SEQUENCIAL
    (7) signature -> DEF ID . LPAREN RPAREN SEQUENCIAL

    LPAREN          shift and go to state 71


state 41

    (10) body -> LCHAV stms . RCHAV

    RCHAV           shift and go to state 72


state 42

    (11) body -> LCHAV RCHAV .

    DEF             reduce using rule 11 (body -> LCHAV RCHAV .)
    $end            reduce using rule 11 (body -> LCHAV RCHAV .)
    WHILE           reduce using rule 11 (body -> LCHAV RCHAV .)
    RCHAV           reduce using rule 11 (body -> LCHAV RCHAV .)
    RETURN          reduce using rule 11 (body -> LCHAV RCHAV .)
    FOR             reduce using rule 11 (body -> LCHAV RCHAV .)
    REPEAT          reduce using rule 11 (body -> LCHAV RCHAV .)
    BREAK           reduce using rule 11 (body -> LCHAV RCHAV .)
    NEXT            reduce using rule 11 (body -> LCHAV RCHAV .)
    SWITCH          reduce using rule 11 (body -> LCHAV RCHAV .)
    IF              reduce using rule 11 (body -> LCHAV RCHAV .)
    NUMBER_INT      reduce using rule 11 (body -> LCHAV RCHAV .)
    NUMBER_FLOAT    reduce using rule 11 (body -> LCHAV RCHAV .)
    ID              reduce using rule 11 (body -> LCHAV RCHAV .)
    TRUE            reduce using rule 11 (body -> LCHAV RCHAV .)
    FALSE           reduce using rule 11 (body -> LCHAV RCHAV .)
    ELSE            reduce using rule 11 (body -> LCHAV RCHAV .)


state 43

    (14) stms -> stm stms .

    DEF             reduce using rule 14 (stms -> stm stms .)
    $end            reduce using rule 14 (stms -> stm stms .)
    RCHAV           reduce using rule 14 (stms -> stm stms .)
    WHILE           reduce using rule 14 (stms -> stm stms .)
    RETURN          reduce using rule 14 (stms -> stm stms .)
    FOR             reduce using rule 14 (stms -> stm stms .)
    REPEAT          reduce using rule 14 (stms -> stm stms .)
    BREAK           reduce using rule 14 (stms -> stm stms .)
    NEXT            reduce using rule 14 (stms -> stm stms .)
    SWITCH          reduce using rule 14 (stms -> stm stms .)
    IF              reduce using rule 14 (stms -> stm stms .)
    NUMBER_INT      reduce using rule 14 (stms -> stm stms .)
    NUMBER_FLOAT    reduce using rule 14 (stms -> stm stms .)
    ID              reduce using rule 14 (stms -> stm stms .)
    TRUE            reduce using rule 14 (stms -> stm stms .)
    FALSE           reduce using rule 14 (stms -> stm stms .)
    ELSE            reduce using rule 14 (stms -> stm stms .)


state 44

    (17) stm -> exp PV .

    WHILE           reduce using rule 17 (stm -> exp PV .)
    RETURN          reduce using rule 17 (stm -> exp PV .)
    FOR             reduce using rule 17 (stm -> exp PV .)
    REPEAT          reduce using rule 17 (stm -> exp PV .)
    BREAK           reduce using rule 17 (stm -> exp PV .)
    NEXT            reduce using rule 17 (stm -> exp PV .)
    SWITCH          reduce using rule 17 (stm -> exp PV .)
    IF              reduce using rule 17 (stm -> exp PV .)
    NUMBER_INT      reduce using rule 17 (stm -> exp PV .)
    NUMBER_FLOAT    reduce using rule 17 (stm -> exp PV .)
    ID              reduce using rule 17 (stm -> exp PV .)
    TRUE            reduce using rule 17 (stm -> exp PV .)
    FALSE           reduce using rule 17 (stm -> exp PV .)
    DEF             reduce using rule 17 (stm -> exp PV .)
    $end            reduce using rule 17 (stm -> exp PV .)
    RCHAV           reduce using rule 17 (stm -> exp PV .)
    ELSE            reduce using rule 17 (stm -> exp PV .)


state 45

    (36) exp -> exp IGUAL . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp1                           shift and go to state 73
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 46

    (18) stm -> WHILE LPAREN . exp RPAREN body
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 74
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 47

    (19) stm -> RETURN exp . PV
    (36) exp -> exp . IGUAL exp1

    PV              shift and go to state 75
    IGUAL           shift and go to state 45


state 48

    (20) stm -> FOR LPAREN . ID IN exp RPAREN body

    ID              shift and go to state 76


state 49

    (74) call -> ID LPAREN . params RPAREN
    (75) call -> ID LPAREN . RPAREN
    (76) params -> . exp COMMA params
    (77) params -> . exp
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 78
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    params                         shift and go to state 77
    exp                            shift and go to state 79
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 50

    (21) stm -> REPEAT body . WHILE LPAREN exp RPAREN PV

    WHILE           shift and go to state 80


state 51

    (22) stm -> BREAK PV .

    WHILE           reduce using rule 22 (stm -> BREAK PV .)
    RETURN          reduce using rule 22 (stm -> BREAK PV .)
    FOR             reduce using rule 22 (stm -> BREAK PV .)
    REPEAT          reduce using rule 22 (stm -> BREAK PV .)
    BREAK           reduce using rule 22 (stm -> BREAK PV .)
    NEXT            reduce using rule 22 (stm -> BREAK PV .)
    SWITCH          reduce using rule 22 (stm -> BREAK PV .)
    IF              reduce using rule 22 (stm -> BREAK PV .)
    NUMBER_INT      reduce using rule 22 (stm -> BREAK PV .)
    NUMBER_FLOAT    reduce using rule 22 (stm -> BREAK PV .)
    ID              reduce using rule 22 (stm -> BREAK PV .)
    TRUE            reduce using rule 22 (stm -> BREAK PV .)
    FALSE           reduce using rule 22 (stm -> BREAK PV .)
    DEF             reduce using rule 22 (stm -> BREAK PV .)
    $end            reduce using rule 22 (stm -> BREAK PV .)
    RCHAV           reduce using rule 22 (stm -> BREAK PV .)
    ELSE            reduce using rule 22 (stm -> BREAK PV .)


state 52

    (23) stm -> NEXT PV .

    WHILE           reduce using rule 23 (stm -> NEXT PV .)
    RETURN          reduce using rule 23 (stm -> NEXT PV .)
    FOR             reduce using rule 23 (stm -> NEXT PV .)
    REPEAT          reduce using rule 23 (stm -> NEXT PV .)
    BREAK           reduce using rule 23 (stm -> NEXT PV .)
    NEXT            reduce using rule 23 (stm -> NEXT PV .)
    SWITCH          reduce using rule 23 (stm -> NEXT PV .)
    IF              reduce using rule 23 (stm -> NEXT PV .)
    NUMBER_INT      reduce using rule 23 (stm -> NEXT PV .)
    NUMBER_FLOAT    reduce using rule 23 (stm -> NEXT PV .)
    ID              reduce using rule 23 (stm -> NEXT PV .)
    TRUE            reduce using rule 23 (stm -> NEXT PV .)
    FALSE           reduce using rule 23 (stm -> NEXT PV .)
    DEF             reduce using rule 23 (stm -> NEXT PV .)
    $end            reduce using rule 23 (stm -> NEXT PV .)
    RCHAV           reduce using rule 23 (stm -> NEXT PV .)
    ELSE            reduce using rule 23 (stm -> NEXT PV .)


state 53

    (24) stm -> SWITCH LPAREN . exp COMMA cases RPAREN
    (25) stm -> SWITCH LPAREN . exp COMMA casesnum RPAREN
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 81
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 54

    (30) stm -> IF LPAREN . exp RPAREN bodyORstm
    (31) stm -> IF LPAREN . exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> IF LPAREN . exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> IF LPAREN . exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> IF LPAREN . exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> IF LPAREN . exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 82
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 55

    (38) exp1 -> exp1 SOMA . exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp2                           shift and go to state 83
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 56

    (40) exp1 -> exp1 SUBTRAIR . exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp2                           shift and go to state 84
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 57

    (41) exp2 -> exp2 VEZES . exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp3                           shift and go to state 85
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 58

    (43) exp2 -> exp2 DIVIDIR . exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp3                           shift and go to state 86
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 59

    (44) exp3 -> exp4 POT . exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp4                           shift and go to state 23
    exp3                           shift and go to state 87
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 60

    (46) exp4 -> exp4 MAIOR . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp5                           shift and go to state 88
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 61

    (48) exp5 -> exp5 MENOR . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp6                           shift and go to state 89
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 62

    (50) exp6 -> exp6 MAIORIGUAL . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp7                           shift and go to state 90
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 63

    (52) exp7 -> exp7 MENORIGUAL . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp8                           shift and go to state 91
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 64

    (54) exp8 -> exp8 DIFERENTE . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp9                           shift and go to state 92
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 65

    (56) exp9 -> exp9 ANDVETOR . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp10                          shift and go to state 93
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 66

    (58) exp10 -> exp10 AND . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp11                          shift and go to state 94
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 67

    (60) exp11 -> exp11 ORVETOR . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp12                          shift and go to state 95
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 68

    (62) exp12 -> exp12 OR . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp13                          shift and go to state 96
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 69

    (64) exp13 -> exp13 NOTLOGICO . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp14                          shift and go to state 97
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 70

    (66) exp14 -> exp14 XOR . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp15                          shift and go to state 98
    call                           shift and go to state 35

state 71

    (4) signature -> DEF ID LPAREN . sigparams RPAREN
    (5) signature -> DEF ID LPAREN . RPAREN
    (6) signature -> DEF ID LPAREN . sigparams RPAREN SEQUENCIAL
    (7) signature -> DEF ID LPAREN . RPAREN SEQUENCIAL
    (8) sigparams -> . ID ID
    (9) sigparams -> . ID ID COMMA sigparams

    RPAREN          shift and go to state 101
    ID              shift and go to state 99

    sigparams                      shift and go to state 100

state 72

    (10) body -> LCHAV stms RCHAV .

    DEF             reduce using rule 10 (body -> LCHAV stms RCHAV .)
    $end            reduce using rule 10 (body -> LCHAV stms RCHAV .)
    WHILE           reduce using rule 10 (body -> LCHAV stms RCHAV .)
    RCHAV           reduce using rule 10 (body -> LCHAV stms RCHAV .)
    RETURN          reduce using rule 10 (body -> LCHAV stms RCHAV .)
    FOR             reduce using rule 10 (body -> LCHAV stms RCHAV .)
    REPEAT          reduce using rule 10 (body -> LCHAV stms RCHAV .)
    BREAK           reduce using rule 10 (body -> LCHAV stms RCHAV .)
    NEXT            reduce using rule 10 (body -> LCHAV stms RCHAV .)
    SWITCH          reduce using rule 10 (body -> LCHAV stms RCHAV .)
    IF              reduce using rule 10 (body -> LCHAV stms RCHAV .)
    NUMBER_INT      reduce using rule 10 (body -> LCHAV stms RCHAV .)
    NUMBER_FLOAT    reduce using rule 10 (body -> LCHAV stms RCHAV .)
    ID              reduce using rule 10 (body -> LCHAV stms RCHAV .)
    TRUE            reduce using rule 10 (body -> LCHAV stms RCHAV .)
    FALSE           reduce using rule 10 (body -> LCHAV stms RCHAV .)
    ELSE            reduce using rule 10 (body -> LCHAV stms RCHAV .)


state 73

    (36) exp -> exp IGUAL exp1 .
    (38) exp1 -> exp1 . SOMA exp2
    (40) exp1 -> exp1 . SUBTRAIR exp2

    PV              reduce using rule 36 (exp -> exp IGUAL exp1 .)
    IGUAL           reduce using rule 36 (exp -> exp IGUAL exp1 .)
    RPAREN          reduce using rule 36 (exp -> exp IGUAL exp1 .)
    COMMA           reduce using rule 36 (exp -> exp IGUAL exp1 .)
    IGUALAT         reduce using rule 36 (exp -> exp IGUAL exp1 .)
    SOMA            shift and go to state 55
    SUBTRAIR        shift and go to state 56


state 74

    (18) stm -> WHILE LPAREN exp . RPAREN body
    (36) exp -> exp . IGUAL exp1

    RPAREN          shift and go to state 102
    IGUAL           shift and go to state 45


state 75

    (19) stm -> RETURN exp PV .

    WHILE           reduce using rule 19 (stm -> RETURN exp PV .)
    RETURN          reduce using rule 19 (stm -> RETURN exp PV .)
    FOR             reduce using rule 19 (stm -> RETURN exp PV .)
    REPEAT          reduce using rule 19 (stm -> RETURN exp PV .)
    BREAK           reduce using rule 19 (stm -> RETURN exp PV .)
    NEXT            reduce using rule 19 (stm -> RETURN exp PV .)
    SWITCH          reduce using rule 19 (stm -> RETURN exp PV .)
    IF              reduce using rule 19 (stm -> RETURN exp PV .)
    NUMBER_INT      reduce using rule 19 (stm -> RETURN exp PV .)
    NUMBER_FLOAT    reduce using rule 19 (stm -> RETURN exp PV .)
    ID              reduce using rule 19 (stm -> RETURN exp PV .)
    TRUE            reduce using rule 19 (stm -> RETURN exp PV .)
    FALSE           reduce using rule 19 (stm -> RETURN exp PV .)
    DEF             reduce using rule 19 (stm -> RETURN exp PV .)
    $end            reduce using rule 19 (stm -> RETURN exp PV .)
    RCHAV           reduce using rule 19 (stm -> RETURN exp PV .)
    ELSE            reduce using rule 19 (stm -> RETURN exp PV .)


state 76

    (20) stm -> FOR LPAREN ID . IN exp RPAREN body

    IN              shift and go to state 103


state 77

    (74) call -> ID LPAREN params . RPAREN

    RPAREN          shift and go to state 104


state 78

    (75) call -> ID LPAREN RPAREN .

    XOR             reduce using rule 75 (call -> ID LPAREN RPAREN .)
    NOTLOGICO       reduce using rule 75 (call -> ID LPAREN RPAREN .)
    OR              reduce using rule 75 (call -> ID LPAREN RPAREN .)
    ORVETOR         reduce using rule 75 (call -> ID LPAREN RPAREN .)
    AND             reduce using rule 75 (call -> ID LPAREN RPAREN .)
    ANDVETOR        reduce using rule 75 (call -> ID LPAREN RPAREN .)
    DIFERENTE       reduce using rule 75 (call -> ID LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 75 (call -> ID LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 75 (call -> ID LPAREN RPAREN .)
    MENOR           reduce using rule 75 (call -> ID LPAREN RPAREN .)
    POT             reduce using rule 75 (call -> ID LPAREN RPAREN .)
    MAIOR           reduce using rule 75 (call -> ID LPAREN RPAREN .)
    VEZES           reduce using rule 75 (call -> ID LPAREN RPAREN .)
    DIVIDIR         reduce using rule 75 (call -> ID LPAREN RPAREN .)
    SOMA            reduce using rule 75 (call -> ID LPAREN RPAREN .)
    SUBTRAIR        reduce using rule 75 (call -> ID LPAREN RPAREN .)
    PV              reduce using rule 75 (call -> ID LPAREN RPAREN .)
    IGUAL           reduce using rule 75 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 75 (call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 75 (call -> ID LPAREN RPAREN .)
    IGUALAT         reduce using rule 75 (call -> ID LPAREN RPAREN .)


state 79

    (76) params -> exp . COMMA params
    (77) params -> exp .
    (36) exp -> exp . IGUAL exp1

    COMMA           shift and go to state 105
    RPAREN          reduce using rule 77 (params -> exp .)
    IGUAL           shift and go to state 45


state 80

    (21) stm -> REPEAT body WHILE . LPAREN exp RPAREN PV

    LPAREN          shift and go to state 106


state 81

    (24) stm -> SWITCH LPAREN exp . COMMA cases RPAREN
    (25) stm -> SWITCH LPAREN exp . COMMA casesnum RPAREN
    (36) exp -> exp . IGUAL exp1

    COMMA           shift and go to state 107
    IGUAL           shift and go to state 45


state 82

    (30) stm -> IF LPAREN exp . RPAREN bodyORstm
    (31) stm -> IF LPAREN exp . RPAREN SEQUENCIAL bodyORstm
    (32) stm -> IF LPAREN exp . RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> IF LPAREN exp . RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> IF LPAREN exp . RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> IF LPAREN exp . RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (36) exp -> exp . IGUAL exp1

    RPAREN          shift and go to state 108
    IGUAL           shift and go to state 45


state 83

    (38) exp1 -> exp1 SOMA exp2 .
    (41) exp2 -> exp2 . VEZES exp3
    (43) exp2 -> exp2 . DIVIDIR exp3

    SOMA            reduce using rule 38 (exp1 -> exp1 SOMA exp2 .)
    SUBTRAIR        reduce using rule 38 (exp1 -> exp1 SOMA exp2 .)
    PV              reduce using rule 38 (exp1 -> exp1 SOMA exp2 .)
    IGUAL           reduce using rule 38 (exp1 -> exp1 SOMA exp2 .)
    RPAREN          reduce using rule 38 (exp1 -> exp1 SOMA exp2 .)
    COMMA           reduce using rule 38 (exp1 -> exp1 SOMA exp2 .)
    IGUALAT         reduce using rule 38 (exp1 -> exp1 SOMA exp2 .)
    VEZES           shift and go to state 57
    DIVIDIR         shift and go to state 58


state 84

    (40) exp1 -> exp1 SUBTRAIR exp2 .
    (41) exp2 -> exp2 . VEZES exp3
    (43) exp2 -> exp2 . DIVIDIR exp3

    SOMA            reduce using rule 40 (exp1 -> exp1 SUBTRAIR exp2 .)
    SUBTRAIR        reduce using rule 40 (exp1 -> exp1 SUBTRAIR exp2 .)
    PV              reduce using rule 40 (exp1 -> exp1 SUBTRAIR exp2 .)
    IGUAL           reduce using rule 40 (exp1 -> exp1 SUBTRAIR exp2 .)
    RPAREN          reduce using rule 40 (exp1 -> exp1 SUBTRAIR exp2 .)
    COMMA           reduce using rule 40 (exp1 -> exp1 SUBTRAIR exp2 .)
    IGUALAT         reduce using rule 40 (exp1 -> exp1 SUBTRAIR exp2 .)
    VEZES           shift and go to state 57
    DIVIDIR         shift and go to state 58


state 85

    (41) exp2 -> exp2 VEZES exp3 .

    VEZES           reduce using rule 41 (exp2 -> exp2 VEZES exp3 .)
    DIVIDIR         reduce using rule 41 (exp2 -> exp2 VEZES exp3 .)
    SOMA            reduce using rule 41 (exp2 -> exp2 VEZES exp3 .)
    SUBTRAIR        reduce using rule 41 (exp2 -> exp2 VEZES exp3 .)
    PV              reduce using rule 41 (exp2 -> exp2 VEZES exp3 .)
    IGUAL           reduce using rule 41 (exp2 -> exp2 VEZES exp3 .)
    RPAREN          reduce using rule 41 (exp2 -> exp2 VEZES exp3 .)
    COMMA           reduce using rule 41 (exp2 -> exp2 VEZES exp3 .)
    IGUALAT         reduce using rule 41 (exp2 -> exp2 VEZES exp3 .)


state 86

    (43) exp2 -> exp2 DIVIDIR exp3 .

    VEZES           reduce using rule 43 (exp2 -> exp2 DIVIDIR exp3 .)
    DIVIDIR         reduce using rule 43 (exp2 -> exp2 DIVIDIR exp3 .)
    SOMA            reduce using rule 43 (exp2 -> exp2 DIVIDIR exp3 .)
    SUBTRAIR        reduce using rule 43 (exp2 -> exp2 DIVIDIR exp3 .)
    PV              reduce using rule 43 (exp2 -> exp2 DIVIDIR exp3 .)
    IGUAL           reduce using rule 43 (exp2 -> exp2 DIVIDIR exp3 .)
    RPAREN          reduce using rule 43 (exp2 -> exp2 DIVIDIR exp3 .)
    COMMA           reduce using rule 43 (exp2 -> exp2 DIVIDIR exp3 .)
    IGUALAT         reduce using rule 43 (exp2 -> exp2 DIVIDIR exp3 .)


state 87

    (44) exp3 -> exp4 POT exp3 .

    VEZES           reduce using rule 44 (exp3 -> exp4 POT exp3 .)
    DIVIDIR         reduce using rule 44 (exp3 -> exp4 POT exp3 .)
    SOMA            reduce using rule 44 (exp3 -> exp4 POT exp3 .)
    SUBTRAIR        reduce using rule 44 (exp3 -> exp4 POT exp3 .)
    PV              reduce using rule 44 (exp3 -> exp4 POT exp3 .)
    IGUAL           reduce using rule 44 (exp3 -> exp4 POT exp3 .)
    RPAREN          reduce using rule 44 (exp3 -> exp4 POT exp3 .)
    COMMA           reduce using rule 44 (exp3 -> exp4 POT exp3 .)
    IGUALAT         reduce using rule 44 (exp3 -> exp4 POT exp3 .)


state 88

    (46) exp4 -> exp4 MAIOR exp5 .
    (48) exp5 -> exp5 . MENOR exp6

    POT             reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    MAIOR           reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    VEZES           reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    DIVIDIR         reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    SOMA            reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    SUBTRAIR        reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    PV              reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    IGUAL           reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    RPAREN          reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    COMMA           reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    IGUALAT         reduce using rule 46 (exp4 -> exp4 MAIOR exp5 .)
    MENOR           shift and go to state 61


state 89

    (48) exp5 -> exp5 MENOR exp6 .
    (50) exp6 -> exp6 . MAIORIGUAL exp7

    MENOR           reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    POT             reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    MAIOR           reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    VEZES           reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    DIVIDIR         reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    SOMA            reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    SUBTRAIR        reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    PV              reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    IGUAL           reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    RPAREN          reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    COMMA           reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    IGUALAT         reduce using rule 48 (exp5 -> exp5 MENOR exp6 .)
    MAIORIGUAL      shift and go to state 62


state 90

    (50) exp6 -> exp6 MAIORIGUAL exp7 .
    (52) exp7 -> exp7 . MENORIGUAL exp8

    MAIORIGUAL      reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    MENOR           reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    POT             reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    MAIOR           reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    VEZES           reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    DIVIDIR         reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    SOMA            reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    SUBTRAIR        reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    PV              reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    IGUAL           reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    RPAREN          reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    COMMA           reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    IGUALAT         reduce using rule 50 (exp6 -> exp6 MAIORIGUAL exp7 .)
    MENORIGUAL      shift and go to state 63


state 91

    (52) exp7 -> exp7 MENORIGUAL exp8 .
    (54) exp8 -> exp8 . DIFERENTE exp9

    MENORIGUAL      reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    MAIORIGUAL      reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    MENOR           reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    POT             reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    MAIOR           reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    VEZES           reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    DIVIDIR         reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    SOMA            reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    SUBTRAIR        reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    PV              reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    IGUAL           reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    RPAREN          reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    COMMA           reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    IGUALAT         reduce using rule 52 (exp7 -> exp7 MENORIGUAL exp8 .)
    DIFERENTE       shift and go to state 64


state 92

    (54) exp8 -> exp8 DIFERENTE exp9 .
    (56) exp9 -> exp9 . ANDVETOR exp10

    DIFERENTE       reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    MENORIGUAL      reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    MAIORIGUAL      reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    MENOR           reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    POT             reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    MAIOR           reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    VEZES           reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    DIVIDIR         reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    SOMA            reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    SUBTRAIR        reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    PV              reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    IGUAL           reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    RPAREN          reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    COMMA           reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    IGUALAT         reduce using rule 54 (exp8 -> exp8 DIFERENTE exp9 .)
    ANDVETOR        shift and go to state 65


state 93

    (56) exp9 -> exp9 ANDVETOR exp10 .
    (58) exp10 -> exp10 . AND exp11

    ANDVETOR        reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    DIFERENTE       reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    MENORIGUAL      reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    MAIORIGUAL      reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    MENOR           reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    POT             reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    MAIOR           reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    VEZES           reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    DIVIDIR         reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    SOMA            reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    SUBTRAIR        reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    PV              reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    IGUAL           reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    RPAREN          reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    COMMA           reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    IGUALAT         reduce using rule 56 (exp9 -> exp9 ANDVETOR exp10 .)
    AND             shift and go to state 66


state 94

    (58) exp10 -> exp10 AND exp11 .
    (60) exp11 -> exp11 . ORVETOR exp12

    AND             reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    ANDVETOR        reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    DIFERENTE       reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    MENORIGUAL      reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    MAIORIGUAL      reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    MENOR           reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    POT             reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    MAIOR           reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    VEZES           reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    DIVIDIR         reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    SOMA            reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    SUBTRAIR        reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    PV              reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    IGUAL           reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    RPAREN          reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    COMMA           reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    IGUALAT         reduce using rule 58 (exp10 -> exp10 AND exp11 .)
    ORVETOR         shift and go to state 67


state 95

    (60) exp11 -> exp11 ORVETOR exp12 .
    (62) exp12 -> exp12 . OR exp13

    ORVETOR         reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    AND             reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    ANDVETOR        reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    DIFERENTE       reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    MENORIGUAL      reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    MAIORIGUAL      reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    MENOR           reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    POT             reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    MAIOR           reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    VEZES           reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    DIVIDIR         reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    SOMA            reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    SUBTRAIR        reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    PV              reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    IGUAL           reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    RPAREN          reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    COMMA           reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    IGUALAT         reduce using rule 60 (exp11 -> exp11 ORVETOR exp12 .)
    OR              shift and go to state 68


state 96

    (62) exp12 -> exp12 OR exp13 .
    (64) exp13 -> exp13 . NOTLOGICO exp14

    OR              reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    ORVETOR         reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    AND             reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    ANDVETOR        reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    DIFERENTE       reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    MENORIGUAL      reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    MAIORIGUAL      reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    MENOR           reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    POT             reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    MAIOR           reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    VEZES           reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    DIVIDIR         reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    SOMA            reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    SUBTRAIR        reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    PV              reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    IGUAL           reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    RPAREN          reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    COMMA           reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    IGUALAT         reduce using rule 62 (exp12 -> exp12 OR exp13 .)
    NOTLOGICO       shift and go to state 69


state 97

    (64) exp13 -> exp13 NOTLOGICO exp14 .
    (66) exp14 -> exp14 . XOR exp15

    NOTLOGICO       reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    OR              reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    ORVETOR         reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    AND             reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    ANDVETOR        reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    DIFERENTE       reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    MENORIGUAL      reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    MAIORIGUAL      reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    MENOR           reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    POT             reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    MAIOR           reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    VEZES           reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    DIVIDIR         reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    SOMA            reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    SUBTRAIR        reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    PV              reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    IGUAL           reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    RPAREN          reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    COMMA           reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    IGUALAT         reduce using rule 64 (exp13 -> exp13 NOTLOGICO exp14 .)
    XOR             shift and go to state 70


state 98

    (66) exp14 -> exp14 XOR exp15 .

    XOR             reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    NOTLOGICO       reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    OR              reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    ORVETOR         reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    AND             reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    ANDVETOR        reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    DIFERENTE       reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    MENORIGUAL      reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    MAIORIGUAL      reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    MENOR           reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    POT             reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    MAIOR           reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    VEZES           reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    DIVIDIR         reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    SOMA            reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    SUBTRAIR        reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    PV              reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    IGUAL           reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    RPAREN          reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    COMMA           reduce using rule 66 (exp14 -> exp14 XOR exp15 .)
    IGUALAT         reduce using rule 66 (exp14 -> exp14 XOR exp15 .)


state 99

    (8) sigparams -> ID . ID
    (9) sigparams -> ID . ID COMMA sigparams

    ID              shift and go to state 109


state 100

    (4) signature -> DEF ID LPAREN sigparams . RPAREN
    (6) signature -> DEF ID LPAREN sigparams . RPAREN SEQUENCIAL

    RPAREN          shift and go to state 110


state 101

    (5) signature -> DEF ID LPAREN RPAREN .
    (7) signature -> DEF ID LPAREN RPAREN . SEQUENCIAL

    LCHAV           reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    WHILE           reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    RETURN          reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    FOR             reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    REPEAT          reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    BREAK           reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    NEXT            reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    SWITCH          reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    IF              reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    NUMBER_INT      reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    NUMBER_FLOAT    reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    ID              reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    TRUE            reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    FALSE           reduce using rule 5 (signature -> DEF ID LPAREN RPAREN .)
    SEQUENCIAL      shift and go to state 111


state 102

    (18) stm -> WHILE LPAREN exp RPAREN . body
    (10) body -> . LCHAV stms RCHAV
    (11) body -> . LCHAV RCHAV
    (12) body -> . stms
    (13) stms -> . stm
    (14) stms -> . stm stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    LCHAV           shift and go to state 7
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 10
    body                           shift and go to state 112
    stms                           shift and go to state 8
    stm                            shift and go to state 9
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 103

    (20) stm -> FOR LPAREN ID IN . exp RPAREN body
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 113
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 104

    (74) call -> ID LPAREN params RPAREN .

    XOR             reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    NOTLOGICO       reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    OR              reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    ORVETOR         reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    AND             reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    ANDVETOR        reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    DIFERENTE       reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    MENORIGUAL      reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    MAIORIGUAL      reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    MENOR           reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    POT             reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    MAIOR           reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    VEZES           reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    DIVIDIR         reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    SOMA            reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    SUBTRAIR        reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    PV              reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    IGUAL           reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    COMMA           reduce using rule 74 (call -> ID LPAREN params RPAREN .)
    IGUALAT         reduce using rule 74 (call -> ID LPAREN params RPAREN .)


state 105

    (76) params -> exp COMMA . params
    (76) params -> . exp COMMA params
    (77) params -> . exp
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 79
    params                         shift and go to state 114
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 106

    (21) stm -> REPEAT body WHILE LPAREN . exp RPAREN PV
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 115
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 107

    (24) stm -> SWITCH LPAREN exp COMMA . cases RPAREN
    (25) stm -> SWITCH LPAREN exp COMMA . casesnum RPAREN
    (26) cases -> . exp IGUALAT exp
    (27) cases -> . exp IGUALAT exp COMMA cases
    (28) casesnum -> . exp
    (29) casesnum -> . exp COMMA cases
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 116
    cases                          shift and go to state 117
    casesnum                       shift and go to state 118
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 108

    (30) stm -> IF LPAREN exp RPAREN . bodyORstm
    (31) stm -> IF LPAREN exp RPAREN . SEQUENCIAL bodyORstm
    (32) stm -> IF LPAREN exp RPAREN . bodyORstm ELSE bodyORstm
    (33) stm -> IF LPAREN exp RPAREN . SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> IF LPAREN exp RPAREN . SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> IF LPAREN exp RPAREN . bodyORstm ELSE SEQUENCIAL bodyORstm
    (15) bodyORstm -> . body
    (16) bodyORstm -> . stm
    (10) body -> . LCHAV stms RCHAV
    (11) body -> . LCHAV RCHAV
    (12) body -> . stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (13) stms -> . stm
    (14) stms -> . stm stms
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    SEQUENCIAL      shift and go to state 120
    LCHAV           shift and go to state 7
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 10
    bodyORstm                      shift and go to state 119
    body                           shift and go to state 121
    stm                            shift and go to state 122
    stms                           shift and go to state 8
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 109

    (8) sigparams -> ID ID .
    (9) sigparams -> ID ID . COMMA sigparams

    RPAREN          reduce using rule 8 (sigparams -> ID ID .)
    COMMA           shift and go to state 123


state 110

    (4) signature -> DEF ID LPAREN sigparams RPAREN .
    (6) signature -> DEF ID LPAREN sigparams RPAREN . SEQUENCIAL

    LCHAV           reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    WHILE           reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    RETURN          reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    FOR             reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    REPEAT          reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    BREAK           reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    NEXT            reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    SWITCH          reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    IF              reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    NUMBER_INT      reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    NUMBER_FLOAT    reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    ID              reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    TRUE            reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    FALSE           reduce using rule 4 (signature -> DEF ID LPAREN sigparams RPAREN .)
    SEQUENCIAL      shift and go to state 124


state 111

    (7) signature -> DEF ID LPAREN RPAREN SEQUENCIAL .

    LCHAV           reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    WHILE           reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    RETURN          reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    FOR             reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    REPEAT          reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    BREAK           reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    NEXT            reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    SWITCH          reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    IF              reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    NUMBER_INT      reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    NUMBER_FLOAT    reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    ID              reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    TRUE            reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)
    FALSE           reduce using rule 7 (signature -> DEF ID LPAREN RPAREN SEQUENCIAL .)


state 112

    (18) stm -> WHILE LPAREN exp RPAREN body .

    WHILE           reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    RETURN          reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    FOR             reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    REPEAT          reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    BREAK           reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    NEXT            reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    SWITCH          reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    IF              reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    NUMBER_INT      reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    NUMBER_FLOAT    reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    ID              reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    TRUE            reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    FALSE           reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    DEF             reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    $end            reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    RCHAV           reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)
    ELSE            reduce using rule 18 (stm -> WHILE LPAREN exp RPAREN body .)


state 113

    (20) stm -> FOR LPAREN ID IN exp . RPAREN body
    (36) exp -> exp . IGUAL exp1

    RPAREN          shift and go to state 125
    IGUAL           shift and go to state 45


state 114

    (76) params -> exp COMMA params .

    RPAREN          reduce using rule 76 (params -> exp COMMA params .)


state 115

    (21) stm -> REPEAT body WHILE LPAREN exp . RPAREN PV
    (36) exp -> exp . IGUAL exp1

    RPAREN          shift and go to state 126
    IGUAL           shift and go to state 45


state 116

    (26) cases -> exp . IGUALAT exp
    (27) cases -> exp . IGUALAT exp COMMA cases
    (28) casesnum -> exp .
    (29) casesnum -> exp . COMMA cases
    (36) exp -> exp . IGUAL exp1

    IGUALAT         shift and go to state 127
    RPAREN          reduce using rule 28 (casesnum -> exp .)
    COMMA           shift and go to state 128
    IGUAL           shift and go to state 45


state 117

    (24) stm -> SWITCH LPAREN exp COMMA cases . RPAREN

    RPAREN          shift and go to state 129


state 118

    (25) stm -> SWITCH LPAREN exp COMMA casesnum . RPAREN

    RPAREN          shift and go to state 130


state 119

    (30) stm -> IF LPAREN exp RPAREN bodyORstm .
    (32) stm -> IF LPAREN exp RPAREN bodyORstm . ELSE bodyORstm
    (35) stm -> IF LPAREN exp RPAREN bodyORstm . ELSE SEQUENCIAL bodyORstm

  ! shift/reduce conflict for ELSE resolved as shift
    WHILE           reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    RETURN          reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    FOR             reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    REPEAT          reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    BREAK           reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    NEXT            reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    SWITCH          reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    IF              reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    NUMBER_INT      reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    NUMBER_FLOAT    reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    ID              reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    TRUE            reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    FALSE           reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    DEF             reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    $end            reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    RCHAV           reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .)
    ELSE            shift and go to state 131

  ! ELSE            [ reduce using rule 30 (stm -> IF LPAREN exp RPAREN bodyORstm .) ]


state 120

    (31) stm -> IF LPAREN exp RPAREN SEQUENCIAL . bodyORstm
    (33) stm -> IF LPAREN exp RPAREN SEQUENCIAL . bodyORstm ELSE bodyORstm
    (34) stm -> IF LPAREN exp RPAREN SEQUENCIAL . bodyORstm ELSE SEQUENCIAL bodyORstm
    (15) bodyORstm -> . body
    (16) bodyORstm -> . stm
    (10) body -> . LCHAV stms RCHAV
    (11) body -> . LCHAV RCHAV
    (12) body -> . stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (13) stms -> . stm
    (14) stms -> . stm stms
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    LCHAV           shift and go to state 7
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 10
    bodyORstm                      shift and go to state 132
    body                           shift and go to state 121
    stm                            shift and go to state 122
    stms                           shift and go to state 8
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 121

    (15) bodyORstm -> body .

    DEF             reduce using rule 15 (bodyORstm -> body .)
    $end            reduce using rule 15 (bodyORstm -> body .)
    RCHAV           reduce using rule 15 (bodyORstm -> body .)
    WHILE           reduce using rule 15 (bodyORstm -> body .)
    RETURN          reduce using rule 15 (bodyORstm -> body .)
    FOR             reduce using rule 15 (bodyORstm -> body .)
    REPEAT          reduce using rule 15 (bodyORstm -> body .)
    BREAK           reduce using rule 15 (bodyORstm -> body .)
    NEXT            reduce using rule 15 (bodyORstm -> body .)
    SWITCH          reduce using rule 15 (bodyORstm -> body .)
    IF              reduce using rule 15 (bodyORstm -> body .)
    NUMBER_INT      reduce using rule 15 (bodyORstm -> body .)
    NUMBER_FLOAT    reduce using rule 15 (bodyORstm -> body .)
    ID              reduce using rule 15 (bodyORstm -> body .)
    TRUE            reduce using rule 15 (bodyORstm -> body .)
    FALSE           reduce using rule 15 (bodyORstm -> body .)
    ELSE            reduce using rule 15 (bodyORstm -> body .)


state 122

    (16) bodyORstm -> stm .
    (13) stms -> stm .
    (14) stms -> stm . stms
    (13) stms -> . stm
    (14) stms -> . stm stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

  ! reduce/reduce conflict for DEF resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for $end resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for RCHAV resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for WHILE resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for RETURN resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for FOR resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for REPEAT resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for BREAK resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for NEXT resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for SWITCH resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for IF resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for NUMBER_INT resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for NUMBER_FLOAT resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for ID resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for TRUE resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for FALSE resolved using rule 13 (stms -> stm .)
  ! reduce/reduce conflict for ELSE resolved using rule 13 (stms -> stm .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for NUMBER_INT resolved as shift
  ! shift/reduce conflict for NUMBER_FLOAT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    DEF             reduce using rule 13 (stms -> stm .)
    $end            reduce using rule 13 (stms -> stm .)
    RCHAV           reduce using rule 13 (stms -> stm .)
    ELSE            reduce using rule 13 (stms -> stm .)
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

  ! DEF             [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! $end            [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! RCHAV           [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! WHILE           [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! RETURN          [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! FOR             [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! REPEAT          [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! BREAK           [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! NEXT            [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! SWITCH          [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! IF              [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! NUMBER_INT      [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! NUMBER_FLOAT    [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! ID              [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! TRUE            [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! FALSE           [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! ELSE            [ reduce using rule 16 (bodyORstm -> stm .) ]
  ! WHILE           [ reduce using rule 13 (stms -> stm .) ]
  ! RETURN          [ reduce using rule 13 (stms -> stm .) ]
  ! FOR             [ reduce using rule 13 (stms -> stm .) ]
  ! REPEAT          [ reduce using rule 13 (stms -> stm .) ]
  ! BREAK           [ reduce using rule 13 (stms -> stm .) ]
  ! NEXT            [ reduce using rule 13 (stms -> stm .) ]
  ! SWITCH          [ reduce using rule 13 (stms -> stm .) ]
  ! IF              [ reduce using rule 13 (stms -> stm .) ]
  ! NUMBER_INT      [ reduce using rule 13 (stms -> stm .) ]
  ! NUMBER_FLOAT    [ reduce using rule 13 (stms -> stm .) ]
  ! ID              [ reduce using rule 13 (stms -> stm .) ]
  ! TRUE            [ reduce using rule 13 (stms -> stm .) ]
  ! FALSE           [ reduce using rule 13 (stms -> stm .) ]

    stm                            shift and go to state 9
    stms                           shift and go to state 43
    exp                            shift and go to state 10
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 123

    (9) sigparams -> ID ID COMMA . sigparams
    (8) sigparams -> . ID ID
    (9) sigparams -> . ID ID COMMA sigparams

    ID              shift and go to state 99

    sigparams                      shift and go to state 133

state 124

    (6) signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .

    LCHAV           reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    WHILE           reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    RETURN          reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    FOR             reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    REPEAT          reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    BREAK           reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    NEXT            reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    SWITCH          reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    IF              reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    NUMBER_INT      reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    NUMBER_FLOAT    reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    ID              reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    TRUE            reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)
    FALSE           reduce using rule 6 (signature -> DEF ID LPAREN sigparams RPAREN SEQUENCIAL .)


state 125

    (20) stm -> FOR LPAREN ID IN exp RPAREN . body
    (10) body -> . LCHAV stms RCHAV
    (11) body -> . LCHAV RCHAV
    (12) body -> . stms
    (13) stms -> . stm
    (14) stms -> . stm stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    LCHAV           shift and go to state 7
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 10
    body                           shift and go to state 134
    stms                           shift and go to state 8
    stm                            shift and go to state 9
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 126

    (21) stm -> REPEAT body WHILE LPAREN exp RPAREN . PV

    PV              shift and go to state 135


state 127

    (26) cases -> exp IGUALAT . exp
    (27) cases -> exp IGUALAT . exp COMMA cases
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 136
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 128

    (29) casesnum -> exp COMMA . cases
    (26) cases -> . exp IGUALAT exp
    (27) cases -> . exp IGUALAT exp COMMA cases
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 137
    cases                          shift and go to state 138
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 129

    (24) stm -> SWITCH LPAREN exp COMMA cases RPAREN .

    WHILE           reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    RETURN          reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    FOR             reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    REPEAT          reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    BREAK           reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    NEXT            reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    SWITCH          reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    IF              reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    NUMBER_INT      reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    NUMBER_FLOAT    reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    ID              reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    TRUE            reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    FALSE           reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    DEF             reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    $end            reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    RCHAV           reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    ELSE            reduce using rule 24 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)


state 130

    (25) stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .

    WHILE           reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    RETURN          reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    FOR             reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    REPEAT          reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    BREAK           reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    NEXT            reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    SWITCH          reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    IF              reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    NUMBER_INT      reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    NUMBER_FLOAT    reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    ID              reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    TRUE            reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    FALSE           reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    DEF             reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    $end            reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    RCHAV           reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)
    ELSE            reduce using rule 25 (stm -> SWITCH LPAREN exp COMMA casesnum RPAREN .)


state 131

    (32) stm -> IF LPAREN exp RPAREN bodyORstm ELSE . bodyORstm
    (35) stm -> IF LPAREN exp RPAREN bodyORstm ELSE . SEQUENCIAL bodyORstm
    (15) bodyORstm -> . body
    (16) bodyORstm -> . stm
    (10) body -> . LCHAV stms RCHAV
    (11) body -> . LCHAV RCHAV
    (12) body -> . stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (13) stms -> . stm
    (14) stms -> . stm stms
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    SEQUENCIAL      shift and go to state 140
    LCHAV           shift and go to state 7
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 10
    bodyORstm                      shift and go to state 139
    body                           shift and go to state 121
    stm                            shift and go to state 122
    stms                           shift and go to state 8
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 132

    (31) stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .
    (33) stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm . ELSE bodyORstm
    (34) stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm . ELSE SEQUENCIAL bodyORstm

  ! shift/reduce conflict for ELSE resolved as shift
    WHILE           reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    RETURN          reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    FOR             reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    REPEAT          reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    BREAK           reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    NEXT            reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    SWITCH          reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    IF              reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    NUMBER_INT      reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    NUMBER_FLOAT    reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    ID              reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    TRUE            reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    FALSE           reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    DEF             reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    $end            reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    RCHAV           reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .)
    ELSE            shift and go to state 141

  ! ELSE            [ reduce using rule 31 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm .) ]


state 133

    (9) sigparams -> ID ID COMMA sigparams .

    RPAREN          reduce using rule 9 (sigparams -> ID ID COMMA sigparams .)


state 134

    (20) stm -> FOR LPAREN ID IN exp RPAREN body .

    WHILE           reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    RETURN          reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    FOR             reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    REPEAT          reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    BREAK           reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    NEXT            reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    SWITCH          reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    IF              reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    NUMBER_INT      reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    NUMBER_FLOAT    reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    ID              reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    TRUE            reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    FALSE           reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    DEF             reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    $end            reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    RCHAV           reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    ELSE            reduce using rule 20 (stm -> FOR LPAREN ID IN exp RPAREN body .)


state 135

    (21) stm -> REPEAT body WHILE LPAREN exp RPAREN PV .

    WHILE           reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    RETURN          reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    FOR             reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    REPEAT          reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    BREAK           reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    NEXT            reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    SWITCH          reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    IF              reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    NUMBER_INT      reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    NUMBER_FLOAT    reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    ID              reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    TRUE            reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    FALSE           reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    DEF             reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    $end            reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    RCHAV           reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    ELSE            reduce using rule 21 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)


state 136

    (26) cases -> exp IGUALAT exp .
    (27) cases -> exp IGUALAT exp . COMMA cases
    (36) exp -> exp . IGUAL exp1

    RPAREN          reduce using rule 26 (cases -> exp IGUALAT exp .)
    COMMA           shift and go to state 142
    IGUAL           shift and go to state 45


state 137

    (26) cases -> exp . IGUALAT exp
    (27) cases -> exp . IGUALAT exp COMMA cases
    (36) exp -> exp . IGUAL exp1

    IGUALAT         shift and go to state 127
    IGUAL           shift and go to state 45


state 138

    (29) casesnum -> exp COMMA cases .

    RPAREN          reduce using rule 29 (casesnum -> exp COMMA cases .)


state 139

    (32) stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .

    WHILE           reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    RETURN          reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    FOR             reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    REPEAT          reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    BREAK           reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    NEXT            reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    SWITCH          reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    IF              reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    NUMBER_INT      reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    NUMBER_FLOAT    reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    ID              reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    TRUE            reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    FALSE           reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    DEF             reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    $end            reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    RCHAV           reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)
    ELSE            reduce using rule 32 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm .)


state 140

    (35) stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL . bodyORstm
    (15) bodyORstm -> . body
    (16) bodyORstm -> . stm
    (10) body -> . LCHAV stms RCHAV
    (11) body -> . LCHAV RCHAV
    (12) body -> . stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (13) stms -> . stm
    (14) stms -> . stm stms
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    LCHAV           shift and go to state 7
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 10
    bodyORstm                      shift and go to state 143
    body                           shift and go to state 121
    stm                            shift and go to state 122
    stms                           shift and go to state 8
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 141

    (33) stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE . bodyORstm
    (34) stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE . SEQUENCIAL bodyORstm
    (15) bodyORstm -> . body
    (16) bodyORstm -> . stm
    (10) body -> . LCHAV stms RCHAV
    (11) body -> . LCHAV RCHAV
    (12) body -> . stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (13) stms -> . stm
    (14) stms -> . stm stms
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    SEQUENCIAL      shift and go to state 144
    LCHAV           shift and go to state 7
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 10
    bodyORstm                      shift and go to state 145
    body                           shift and go to state 121
    stm                            shift and go to state 122
    stms                           shift and go to state 8
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 142

    (27) cases -> exp IGUALAT exp COMMA . cases
    (26) cases -> . exp IGUALAT exp
    (27) cases -> . exp IGUALAT exp COMMA cases
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 137
    cases                          shift and go to state 146
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 143

    (35) stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .

    WHILE           reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    RETURN          reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    FOR             reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    REPEAT          reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    BREAK           reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    NEXT            reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    SWITCH          reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    IF              reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    NUMBER_INT      reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    NUMBER_FLOAT    reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    ID              reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    TRUE            reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    FALSE           reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    DEF             reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    $end            reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    RCHAV           reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)
    ELSE            reduce using rule 35 (stm -> IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm .)


state 144

    (34) stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL . bodyORstm
    (15) bodyORstm -> . body
    (16) bodyORstm -> . stm
    (10) body -> . LCHAV stms RCHAV
    (11) body -> . LCHAV RCHAV
    (12) body -> . stms
    (17) stm -> . exp PV
    (18) stm -> . WHILE LPAREN exp RPAREN body
    (19) stm -> . RETURN exp PV
    (20) stm -> . FOR LPAREN ID IN exp RPAREN body
    (21) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (22) stm -> . BREAK PV
    (23) stm -> . NEXT PV
    (24) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (25) stm -> . SWITCH LPAREN exp COMMA casesnum RPAREN
    (30) stm -> . IF LPAREN exp RPAREN bodyORstm
    (31) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm
    (32) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE bodyORstm
    (33) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm
    (34) stm -> . IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm
    (35) stm -> . IF LPAREN exp RPAREN bodyORstm ELSE SEQUENCIAL bodyORstm
    (13) stms -> . stm
    (14) stms -> . stm stms
    (36) exp -> . exp IGUAL exp1
    (37) exp -> . exp1
    (38) exp1 -> . exp1 SOMA exp2
    (39) exp1 -> . exp2
    (40) exp1 -> . exp1 SUBTRAIR exp2
    (41) exp2 -> . exp2 VEZES exp3
    (42) exp2 -> . exp3
    (43) exp2 -> . exp2 DIVIDIR exp3
    (44) exp3 -> . exp4 POT exp3
    (45) exp3 -> . exp4
    (46) exp4 -> . exp4 MAIOR exp5
    (47) exp4 -> . exp5
    (48) exp5 -> . exp5 MENOR exp6
    (49) exp5 -> . exp6
    (50) exp6 -> . exp6 MAIORIGUAL exp7
    (51) exp6 -> . exp7
    (52) exp7 -> . exp7 MENORIGUAL exp8
    (53) exp7 -> . exp8
    (54) exp8 -> . exp8 DIFERENTE exp9
    (55) exp8 -> . exp9
    (56) exp9 -> . exp9 ANDVETOR exp10
    (57) exp9 -> . exp10
    (58) exp10 -> . exp10 AND exp11
    (59) exp10 -> . exp11
    (60) exp11 -> . exp11 ORVETOR exp12
    (61) exp11 -> . exp12
    (62) exp12 -> . exp12 OR exp13
    (63) exp12 -> . exp13
    (64) exp13 -> . exp13 NOTLOGICO exp14
    (65) exp13 -> . exp14
    (66) exp14 -> . exp14 XOR exp15
    (67) exp14 -> . exp15
    (68) exp15 -> . call
    (69) exp15 -> . NUMBER_INT
    (70) exp15 -> . NUMBER_FLOAT
    (71) exp15 -> . ID
    (72) exp15 -> . TRUE
    (73) exp15 -> . FALSE
    (74) call -> . ID LPAREN params RPAREN
    (75) call -> . ID LPAREN RPAREN

    LCHAV           shift and go to state 7
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    FOR             shift and go to state 13
    REPEAT          shift and go to state 15
    BREAK           shift and go to state 16
    NEXT            shift and go to state 17
    SWITCH          shift and go to state 18
    IF              shift and go to state 19
    NUMBER_INT      shift and go to state 36
    NUMBER_FLOAT    shift and go to state 37
    ID              shift and go to state 14
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 10
    bodyORstm                      shift and go to state 147
    body                           shift and go to state 121
    stm                            shift and go to state 122
    stms                           shift and go to state 8
    exp1                           shift and go to state 20
    exp2                           shift and go to state 21
    exp3                           shift and go to state 22
    exp4                           shift and go to state 23
    exp5                           shift and go to state 24
    exp6                           shift and go to state 25
    exp7                           shift and go to state 26
    exp8                           shift and go to state 27
    exp9                           shift and go to state 28
    exp10                          shift and go to state 29
    exp11                          shift and go to state 30
    exp12                          shift and go to state 31
    exp13                          shift and go to state 32
    exp14                          shift and go to state 33
    exp15                          shift and go to state 34
    call                           shift and go to state 35

state 145

    (33) stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .

    WHILE           reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    RETURN          reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    FOR             reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    REPEAT          reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    BREAK           reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    NEXT            reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    SWITCH          reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    IF              reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    NUMBER_INT      reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    NUMBER_FLOAT    reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    ID              reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    TRUE            reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    FALSE           reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    DEF             reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    $end            reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    RCHAV           reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)
    ELSE            reduce using rule 33 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE bodyORstm .)


state 146

    (27) cases -> exp IGUALAT exp COMMA cases .

    RPAREN          reduce using rule 27 (cases -> exp IGUALAT exp COMMA cases .)


state 147

    (34) stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .

    WHILE           reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    RETURN          reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    FOR             reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    REPEAT          reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    BREAK           reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    NEXT            reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    SWITCH          reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    IF              reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    NUMBER_INT      reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    NUMBER_FLOAT    reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    ID              reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    TRUE            reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    FALSE           reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    DEF             reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    $end            reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    RCHAV           reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)
    ELSE            reduce using rule 34 (stm -> IF LPAREN exp RPAREN SEQUENCIAL bodyORstm ELSE SEQUENCIAL bodyORstm .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 9 resolved as shift
WARNING: shift/reduce conflict for FOR in state 9 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 9 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 9 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 9 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 9 resolved as shift
WARNING: shift/reduce conflict for IF in state 9 resolved as shift
WARNING: shift/reduce conflict for NUMBER_INT in state 9 resolved as shift
WARNING: shift/reduce conflict for NUMBER_FLOAT in state 9 resolved as shift
WARNING: shift/reduce conflict for ID in state 9 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 9 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 9 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 119 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 122 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 122 resolved as shift
WARNING: shift/reduce conflict for FOR in state 122 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 122 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 122 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 122 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 122 resolved as shift
WARNING: shift/reduce conflict for IF in state 122 resolved as shift
WARNING: shift/reduce conflict for NUMBER_INT in state 122 resolved as shift
WARNING: shift/reduce conflict for NUMBER_FLOAT in state 122 resolved as shift
WARNING: shift/reduce conflict for ID in state 122 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 122 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 122 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 132 resolved as shift
WARNING: reduce/reduce conflict in state 122 resolved using rule (stms -> stm)
WARNING: rejected rule (bodyORstm -> stm) in state 122
WARNING: Rule (bodyORstm -> stm) is never reduced
