Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ANDVETOR
    CALL
    CAT
    DEDENT
    DIFERENTE
    FUNCTION
    IDENT
    IGUALAT
    INF
    LINHA
    MAIOR
    MAIORIGUAL
    MENOR
    MENORIGUAL
    MODULO
    NA
    NANA
    NA_CHARACTER_
    NA_COMPLEX
    NA_INTEGER_
    NA_REAL_
    NOTLOGICO
    NULL
    OR
    ORVETOR
    PASS
    SEQUENCIAL
    XOR

Grammar

Rule 0     S' -> program
Rule 1     program -> funcdecl
Rule 2     program -> funcdecl program
Rule 3     funcdecl -> signature body
Rule 4     signature -> ID ID LPAREN sigparams RPAREN
Rule 5     signature -> ID ID LPAREN RPAREN
Rule 6     sigparams -> ID ID
Rule 7     sigparams -> ID ID COMMA sigparams
Rule 8     body -> LCHAV stms RCHAV
Rule 9     body -> LCHAV RCHAV
Rule 10    stms -> stm
Rule 11    stms -> stm stms
Rule 12    stm -> exp PV
Rule 13    stm -> WHILE LPAREN exp RPAREN body
Rule 14    stm -> RETURN exp PV
Rule 15    stm -> FOR LPAREN ID IN exp RPAREN body
Rule 16    stm -> REPEAT body WHILE LPAREN exp RPAREN PV
Rule 17    stm -> BREAK PV
Rule 18    stm -> NEXT PV
Rule 19    stm -> SWITCH LPAREN exp COMMA cases RPAREN
Rule 20    cases -> exp IGUAL body
Rule 21    cases -> exp IGUAL body cases
Rule 22    cases -> exp IGUAL stm
Rule 23    cases -> exp IGUAL stm cases
Rule 24    stm -> IF LPAREN exp RPAREN body ELSE body
Rule 25    exp -> exp IGUAL exp1
Rule 26    exp -> exp1
Rule 27    exp1 -> exp1 SOMA exp2
Rule 28    exp1 -> exp2
Rule 29    exp1 -> exp1 SUBTRAIR exp2
Rule 30    exp2 -> exp2 VEZES exp3
Rule 31    exp2 -> exp3
Rule 32    exp2 -> exp2 DIVIDIR exp3
Rule 33    exp3 -> exp4 POT exp3
Rule 34    exp3 -> exp4
Rule 35    exp4 -> call
Rule 36    exp4 -> NUMBER_INT
Rule 37    exp4 -> NUMBER_FLOAT
Rule 38    exp4 -> ID
Rule 39    exp4 -> TRUE
Rule 40    exp4 -> FALSE
Rule 41    call -> ID LPAREN params RPAREN
Rule 42    call -> ID LPAREN RPAREN
Rule 43    params -> exp COMMA params
Rule 44    params -> exp

Terminals, with rules where they appear

AND                  : 
ANDVETOR             : 
BREAK                : 17
CALL                 : 
CAT                  : 
COMMA                : 7 19 43
DEDENT               : 
DIFERENTE            : 
DIVIDIR              : 32
ELSE                 : 24
FALSE                : 40
FOR                  : 15
FUNCTION             : 
ID                   : 4 4 5 5 6 6 7 7 15 38 41 42
IDENT                : 
IF                   : 24
IGUAL                : 20 21 22 23 25
IGUALAT              : 
IN                   : 15
INF                  : 
LCHAV                : 8 9
LINHA                : 
LPAREN               : 4 5 13 15 16 19 24 41 42
MAIOR                : 
MAIORIGUAL           : 
MENOR                : 
MENORIGUAL           : 
MODULO               : 
NA                   : 
NANA                 : 
NA_CHARACTER_        : 
NA_COMPLEX           : 
NA_INTEGER_          : 
NA_REAL_             : 
NEXT                 : 18
NOTLOGICO            : 
NULL                 : 
NUMBER_FLOAT         : 37
NUMBER_INT           : 36
OR                   : 
ORVETOR              : 
PASS                 : 
POT                  : 33
PV                   : 12 14 16 17 18
RCHAV                : 8 9
REPEAT               : 16
RETURN               : 14
RPAREN               : 4 5 13 15 16 19 24 41 42
SEQUENCIAL           : 
SOMA                 : 27
SUBTRAIR             : 29
SWITCH               : 19
TRUE                 : 39
VEZES                : 30
WHILE                : 13 16
XOR                  : 
error                : 

Nonterminals, with rules where they appear

body                 : 3 13 15 16 20 21 24 24
call                 : 35
cases                : 19 21 23
exp                  : 12 13 14 15 16 19 20 21 22 23 24 25 43 44
exp1                 : 25 26 27 29
exp2                 : 27 28 29 30 32
exp3                 : 30 31 32 33
exp4                 : 33 34
funcdecl             : 1 2
params               : 41 43
program              : 2 0
signature            : 3
sigparams            : 4 7
stm                  : 10 11 22 23
stms                 : 8 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . funcdecl
    (2) program -> . funcdecl program
    (3) funcdecl -> . signature body
    (4) signature -> . ID ID LPAREN sigparams RPAREN
    (5) signature -> . ID ID LPAREN RPAREN

    ID              shift and go to state 4

    program                        shift and go to state 1
    funcdecl                       shift and go to state 2
    signature                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> funcdecl .
    (2) program -> funcdecl . program
    (1) program -> . funcdecl
    (2) program -> . funcdecl program
    (3) funcdecl -> . signature body
    (4) signature -> . ID ID LPAREN sigparams RPAREN
    (5) signature -> . ID ID LPAREN RPAREN

    $end            reduce using rule 1 (program -> funcdecl .)
    ID              shift and go to state 4

    funcdecl                       shift and go to state 2
    program                        shift and go to state 5
    signature                      shift and go to state 3

state 3

    (3) funcdecl -> signature . body
    (8) body -> . LCHAV stms RCHAV
    (9) body -> . LCHAV RCHAV

    LCHAV           shift and go to state 7

    body                           shift and go to state 6

state 4

    (4) signature -> ID . ID LPAREN sigparams RPAREN
    (5) signature -> ID . ID LPAREN RPAREN

    ID              shift and go to state 8


state 5

    (2) program -> funcdecl program .

    $end            reduce using rule 2 (program -> funcdecl program .)


state 6

    (3) funcdecl -> signature body .

    ID              reduce using rule 3 (funcdecl -> signature body .)
    $end            reduce using rule 3 (funcdecl -> signature body .)


state 7

    (8) body -> LCHAV . stms RCHAV
    (9) body -> LCHAV . RCHAV
    (10) stms -> . stm
    (11) stms -> . stm stms
    (12) stm -> . exp PV
    (13) stm -> . WHILE LPAREN exp RPAREN body
    (14) stm -> . RETURN exp PV
    (15) stm -> . FOR LPAREN ID IN exp RPAREN body
    (16) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (17) stm -> . BREAK PV
    (18) stm -> . NEXT PV
    (19) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (24) stm -> . IF LPAREN exp RPAREN body ELSE body
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    RCHAV           shift and go to state 10
    WHILE           shift and go to state 13
    RETURN          shift and go to state 14
    FOR             shift and go to state 15
    REPEAT          shift and go to state 17
    BREAK           shift and go to state 18
    NEXT            shift and go to state 19
    SWITCH          shift and go to state 20
    IF              shift and go to state 21
    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    stms                           shift and go to state 9
    stm                            shift and go to state 11
    exp                            shift and go to state 12
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 8

    (4) signature -> ID ID . LPAREN sigparams RPAREN
    (5) signature -> ID ID . LPAREN RPAREN

    LPAREN          shift and go to state 31


state 9

    (8) body -> LCHAV stms . RCHAV

    RCHAV           shift and go to state 32


state 10

    (9) body -> LCHAV RCHAV .

    ID              reduce using rule 9 (body -> LCHAV RCHAV .)
    $end            reduce using rule 9 (body -> LCHAV RCHAV .)
    WHILE           reduce using rule 9 (body -> LCHAV RCHAV .)
    RETURN          reduce using rule 9 (body -> LCHAV RCHAV .)
    FOR             reduce using rule 9 (body -> LCHAV RCHAV .)
    REPEAT          reduce using rule 9 (body -> LCHAV RCHAV .)
    BREAK           reduce using rule 9 (body -> LCHAV RCHAV .)
    NEXT            reduce using rule 9 (body -> LCHAV RCHAV .)
    SWITCH          reduce using rule 9 (body -> LCHAV RCHAV .)
    IF              reduce using rule 9 (body -> LCHAV RCHAV .)
    NUMBER_INT      reduce using rule 9 (body -> LCHAV RCHAV .)
    NUMBER_FLOAT    reduce using rule 9 (body -> LCHAV RCHAV .)
    TRUE            reduce using rule 9 (body -> LCHAV RCHAV .)
    FALSE           reduce using rule 9 (body -> LCHAV RCHAV .)
    RCHAV           reduce using rule 9 (body -> LCHAV RCHAV .)
    RPAREN          reduce using rule 9 (body -> LCHAV RCHAV .)
    ELSE            reduce using rule 9 (body -> LCHAV RCHAV .)


state 11

    (10) stms -> stm .
    (11) stms -> stm . stms
    (10) stms -> . stm
    (11) stms -> . stm stms
    (12) stm -> . exp PV
    (13) stm -> . WHILE LPAREN exp RPAREN body
    (14) stm -> . RETURN exp PV
    (15) stm -> . FOR LPAREN ID IN exp RPAREN body
    (16) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (17) stm -> . BREAK PV
    (18) stm -> . NEXT PV
    (19) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (24) stm -> . IF LPAREN exp RPAREN body ELSE body
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    RCHAV           reduce using rule 10 (stms -> stm .)
    WHILE           shift and go to state 13
    RETURN          shift and go to state 14
    FOR             shift and go to state 15
    REPEAT          shift and go to state 17
    BREAK           shift and go to state 18
    NEXT            shift and go to state 19
    SWITCH          shift and go to state 20
    IF              shift and go to state 21
    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    stm                            shift and go to state 11
    stms                           shift and go to state 33
    exp                            shift and go to state 12
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 12

    (12) stm -> exp . PV
    (25) exp -> exp . IGUAL exp1

    PV              shift and go to state 34
    IGUAL           shift and go to state 35


state 13

    (13) stm -> WHILE . LPAREN exp RPAREN body

    LPAREN          shift and go to state 36


state 14

    (14) stm -> RETURN . exp PV
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 37
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 15

    (15) stm -> FOR . LPAREN ID IN exp RPAREN body

    LPAREN          shift and go to state 38


state 16

    (38) exp4 -> ID .
    (41) call -> ID . LPAREN params RPAREN
    (42) call -> ID . LPAREN RPAREN

    POT             reduce using rule 38 (exp4 -> ID .)
    VEZES           reduce using rule 38 (exp4 -> ID .)
    DIVIDIR         reduce using rule 38 (exp4 -> ID .)
    SOMA            reduce using rule 38 (exp4 -> ID .)
    SUBTRAIR        reduce using rule 38 (exp4 -> ID .)
    PV              reduce using rule 38 (exp4 -> ID .)
    IGUAL           reduce using rule 38 (exp4 -> ID .)
    RPAREN          reduce using rule 38 (exp4 -> ID .)
    COMMA           reduce using rule 38 (exp4 -> ID .)
    LPAREN          shift and go to state 39


state 17

    (16) stm -> REPEAT . body WHILE LPAREN exp RPAREN PV
    (8) body -> . LCHAV stms RCHAV
    (9) body -> . LCHAV RCHAV

    LCHAV           shift and go to state 7

    body                           shift and go to state 40

state 18

    (17) stm -> BREAK . PV

    PV              shift and go to state 41


state 19

    (18) stm -> NEXT . PV

    PV              shift and go to state 42


state 20

    (19) stm -> SWITCH . LPAREN exp COMMA cases RPAREN

    LPAREN          shift and go to state 43


state 21

    (24) stm -> IF . LPAREN exp RPAREN body ELSE body

    LPAREN          shift and go to state 44


state 22

    (26) exp -> exp1 .
    (27) exp1 -> exp1 . SOMA exp2
    (29) exp1 -> exp1 . SUBTRAIR exp2

    PV              reduce using rule 26 (exp -> exp1 .)
    IGUAL           reduce using rule 26 (exp -> exp1 .)
    RPAREN          reduce using rule 26 (exp -> exp1 .)
    COMMA           reduce using rule 26 (exp -> exp1 .)
    SOMA            shift and go to state 45
    SUBTRAIR        shift and go to state 46


state 23

    (28) exp1 -> exp2 .
    (30) exp2 -> exp2 . VEZES exp3
    (32) exp2 -> exp2 . DIVIDIR exp3

    SOMA            reduce using rule 28 (exp1 -> exp2 .)
    SUBTRAIR        reduce using rule 28 (exp1 -> exp2 .)
    PV              reduce using rule 28 (exp1 -> exp2 .)
    IGUAL           reduce using rule 28 (exp1 -> exp2 .)
    RPAREN          reduce using rule 28 (exp1 -> exp2 .)
    COMMA           reduce using rule 28 (exp1 -> exp2 .)
    VEZES           shift and go to state 47
    DIVIDIR         shift and go to state 48


state 24

    (31) exp2 -> exp3 .

    VEZES           reduce using rule 31 (exp2 -> exp3 .)
    DIVIDIR         reduce using rule 31 (exp2 -> exp3 .)
    SOMA            reduce using rule 31 (exp2 -> exp3 .)
    SUBTRAIR        reduce using rule 31 (exp2 -> exp3 .)
    PV              reduce using rule 31 (exp2 -> exp3 .)
    IGUAL           reduce using rule 31 (exp2 -> exp3 .)
    RPAREN          reduce using rule 31 (exp2 -> exp3 .)
    COMMA           reduce using rule 31 (exp2 -> exp3 .)


state 25

    (33) exp3 -> exp4 . POT exp3
    (34) exp3 -> exp4 .

    POT             shift and go to state 49
    VEZES           reduce using rule 34 (exp3 -> exp4 .)
    DIVIDIR         reduce using rule 34 (exp3 -> exp4 .)
    SOMA            reduce using rule 34 (exp3 -> exp4 .)
    SUBTRAIR        reduce using rule 34 (exp3 -> exp4 .)
    PV              reduce using rule 34 (exp3 -> exp4 .)
    IGUAL           reduce using rule 34 (exp3 -> exp4 .)
    RPAREN          reduce using rule 34 (exp3 -> exp4 .)
    COMMA           reduce using rule 34 (exp3 -> exp4 .)


state 26

    (35) exp4 -> call .

    POT             reduce using rule 35 (exp4 -> call .)
    VEZES           reduce using rule 35 (exp4 -> call .)
    DIVIDIR         reduce using rule 35 (exp4 -> call .)
    SOMA            reduce using rule 35 (exp4 -> call .)
    SUBTRAIR        reduce using rule 35 (exp4 -> call .)
    PV              reduce using rule 35 (exp4 -> call .)
    IGUAL           reduce using rule 35 (exp4 -> call .)
    RPAREN          reduce using rule 35 (exp4 -> call .)
    COMMA           reduce using rule 35 (exp4 -> call .)


state 27

    (36) exp4 -> NUMBER_INT .

    POT             reduce using rule 36 (exp4 -> NUMBER_INT .)
    VEZES           reduce using rule 36 (exp4 -> NUMBER_INT .)
    DIVIDIR         reduce using rule 36 (exp4 -> NUMBER_INT .)
    SOMA            reduce using rule 36 (exp4 -> NUMBER_INT .)
    SUBTRAIR        reduce using rule 36 (exp4 -> NUMBER_INT .)
    PV              reduce using rule 36 (exp4 -> NUMBER_INT .)
    IGUAL           reduce using rule 36 (exp4 -> NUMBER_INT .)
    RPAREN          reduce using rule 36 (exp4 -> NUMBER_INT .)
    COMMA           reduce using rule 36 (exp4 -> NUMBER_INT .)


state 28

    (37) exp4 -> NUMBER_FLOAT .

    POT             reduce using rule 37 (exp4 -> NUMBER_FLOAT .)
    VEZES           reduce using rule 37 (exp4 -> NUMBER_FLOAT .)
    DIVIDIR         reduce using rule 37 (exp4 -> NUMBER_FLOAT .)
    SOMA            reduce using rule 37 (exp4 -> NUMBER_FLOAT .)
    SUBTRAIR        reduce using rule 37 (exp4 -> NUMBER_FLOAT .)
    PV              reduce using rule 37 (exp4 -> NUMBER_FLOAT .)
    IGUAL           reduce using rule 37 (exp4 -> NUMBER_FLOAT .)
    RPAREN          reduce using rule 37 (exp4 -> NUMBER_FLOAT .)
    COMMA           reduce using rule 37 (exp4 -> NUMBER_FLOAT .)


state 29

    (39) exp4 -> TRUE .

    POT             reduce using rule 39 (exp4 -> TRUE .)
    VEZES           reduce using rule 39 (exp4 -> TRUE .)
    DIVIDIR         reduce using rule 39 (exp4 -> TRUE .)
    SOMA            reduce using rule 39 (exp4 -> TRUE .)
    SUBTRAIR        reduce using rule 39 (exp4 -> TRUE .)
    PV              reduce using rule 39 (exp4 -> TRUE .)
    IGUAL           reduce using rule 39 (exp4 -> TRUE .)
    RPAREN          reduce using rule 39 (exp4 -> TRUE .)
    COMMA           reduce using rule 39 (exp4 -> TRUE .)


state 30

    (40) exp4 -> FALSE .

    POT             reduce using rule 40 (exp4 -> FALSE .)
    VEZES           reduce using rule 40 (exp4 -> FALSE .)
    DIVIDIR         reduce using rule 40 (exp4 -> FALSE .)
    SOMA            reduce using rule 40 (exp4 -> FALSE .)
    SUBTRAIR        reduce using rule 40 (exp4 -> FALSE .)
    PV              reduce using rule 40 (exp4 -> FALSE .)
    IGUAL           reduce using rule 40 (exp4 -> FALSE .)
    RPAREN          reduce using rule 40 (exp4 -> FALSE .)
    COMMA           reduce using rule 40 (exp4 -> FALSE .)


state 31

    (4) signature -> ID ID LPAREN . sigparams RPAREN
    (5) signature -> ID ID LPAREN . RPAREN
    (6) sigparams -> . ID ID
    (7) sigparams -> . ID ID COMMA sigparams

    RPAREN          shift and go to state 52
    ID              shift and go to state 50

    sigparams                      shift and go to state 51

state 32

    (8) body -> LCHAV stms RCHAV .

    ID              reduce using rule 8 (body -> LCHAV stms RCHAV .)
    $end            reduce using rule 8 (body -> LCHAV stms RCHAV .)
    WHILE           reduce using rule 8 (body -> LCHAV stms RCHAV .)
    RETURN          reduce using rule 8 (body -> LCHAV stms RCHAV .)
    FOR             reduce using rule 8 (body -> LCHAV stms RCHAV .)
    REPEAT          reduce using rule 8 (body -> LCHAV stms RCHAV .)
    BREAK           reduce using rule 8 (body -> LCHAV stms RCHAV .)
    NEXT            reduce using rule 8 (body -> LCHAV stms RCHAV .)
    SWITCH          reduce using rule 8 (body -> LCHAV stms RCHAV .)
    IF              reduce using rule 8 (body -> LCHAV stms RCHAV .)
    NUMBER_INT      reduce using rule 8 (body -> LCHAV stms RCHAV .)
    NUMBER_FLOAT    reduce using rule 8 (body -> LCHAV stms RCHAV .)
    TRUE            reduce using rule 8 (body -> LCHAV stms RCHAV .)
    FALSE           reduce using rule 8 (body -> LCHAV stms RCHAV .)
    RCHAV           reduce using rule 8 (body -> LCHAV stms RCHAV .)
    RPAREN          reduce using rule 8 (body -> LCHAV stms RCHAV .)
    ELSE            reduce using rule 8 (body -> LCHAV stms RCHAV .)


state 33

    (11) stms -> stm stms .

    RCHAV           reduce using rule 11 (stms -> stm stms .)


state 34

    (12) stm -> exp PV .

    WHILE           reduce using rule 12 (stm -> exp PV .)
    RETURN          reduce using rule 12 (stm -> exp PV .)
    FOR             reduce using rule 12 (stm -> exp PV .)
    REPEAT          reduce using rule 12 (stm -> exp PV .)
    BREAK           reduce using rule 12 (stm -> exp PV .)
    NEXT            reduce using rule 12 (stm -> exp PV .)
    SWITCH          reduce using rule 12 (stm -> exp PV .)
    IF              reduce using rule 12 (stm -> exp PV .)
    NUMBER_INT      reduce using rule 12 (stm -> exp PV .)
    NUMBER_FLOAT    reduce using rule 12 (stm -> exp PV .)
    ID              reduce using rule 12 (stm -> exp PV .)
    TRUE            reduce using rule 12 (stm -> exp PV .)
    FALSE           reduce using rule 12 (stm -> exp PV .)
    RCHAV           reduce using rule 12 (stm -> exp PV .)
    RPAREN          reduce using rule 12 (stm -> exp PV .)


state 35

    (25) exp -> exp IGUAL . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp1                           shift and go to state 53
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 36

    (13) stm -> WHILE LPAREN . exp RPAREN body
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 54
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 37

    (14) stm -> RETURN exp . PV
    (25) exp -> exp . IGUAL exp1

    PV              shift and go to state 55
    IGUAL           shift and go to state 35


state 38

    (15) stm -> FOR LPAREN . ID IN exp RPAREN body

    ID              shift and go to state 56


state 39

    (41) call -> ID LPAREN . params RPAREN
    (42) call -> ID LPAREN . RPAREN
    (43) params -> . exp COMMA params
    (44) params -> . exp
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 58
    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    params                         shift and go to state 57
    exp                            shift and go to state 59
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 40

    (16) stm -> REPEAT body . WHILE LPAREN exp RPAREN PV

    WHILE           shift and go to state 60


state 41

    (17) stm -> BREAK PV .

    WHILE           reduce using rule 17 (stm -> BREAK PV .)
    RETURN          reduce using rule 17 (stm -> BREAK PV .)
    FOR             reduce using rule 17 (stm -> BREAK PV .)
    REPEAT          reduce using rule 17 (stm -> BREAK PV .)
    BREAK           reduce using rule 17 (stm -> BREAK PV .)
    NEXT            reduce using rule 17 (stm -> BREAK PV .)
    SWITCH          reduce using rule 17 (stm -> BREAK PV .)
    IF              reduce using rule 17 (stm -> BREAK PV .)
    NUMBER_INT      reduce using rule 17 (stm -> BREAK PV .)
    NUMBER_FLOAT    reduce using rule 17 (stm -> BREAK PV .)
    ID              reduce using rule 17 (stm -> BREAK PV .)
    TRUE            reduce using rule 17 (stm -> BREAK PV .)
    FALSE           reduce using rule 17 (stm -> BREAK PV .)
    RCHAV           reduce using rule 17 (stm -> BREAK PV .)
    RPAREN          reduce using rule 17 (stm -> BREAK PV .)


state 42

    (18) stm -> NEXT PV .

    WHILE           reduce using rule 18 (stm -> NEXT PV .)
    RETURN          reduce using rule 18 (stm -> NEXT PV .)
    FOR             reduce using rule 18 (stm -> NEXT PV .)
    REPEAT          reduce using rule 18 (stm -> NEXT PV .)
    BREAK           reduce using rule 18 (stm -> NEXT PV .)
    NEXT            reduce using rule 18 (stm -> NEXT PV .)
    SWITCH          reduce using rule 18 (stm -> NEXT PV .)
    IF              reduce using rule 18 (stm -> NEXT PV .)
    NUMBER_INT      reduce using rule 18 (stm -> NEXT PV .)
    NUMBER_FLOAT    reduce using rule 18 (stm -> NEXT PV .)
    ID              reduce using rule 18 (stm -> NEXT PV .)
    TRUE            reduce using rule 18 (stm -> NEXT PV .)
    FALSE           reduce using rule 18 (stm -> NEXT PV .)
    RCHAV           reduce using rule 18 (stm -> NEXT PV .)
    RPAREN          reduce using rule 18 (stm -> NEXT PV .)


state 43

    (19) stm -> SWITCH LPAREN . exp COMMA cases RPAREN
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 61
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 44

    (24) stm -> IF LPAREN . exp RPAREN body ELSE body
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 62
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 45

    (27) exp1 -> exp1 SOMA . exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp2                           shift and go to state 63
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 46

    (29) exp1 -> exp1 SUBTRAIR . exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp2                           shift and go to state 64
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 47

    (30) exp2 -> exp2 VEZES . exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp3                           shift and go to state 65
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 48

    (32) exp2 -> exp2 DIVIDIR . exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp3                           shift and go to state 66
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 49

    (33) exp3 -> exp4 POT . exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp4                           shift and go to state 25
    exp3                           shift and go to state 67
    call                           shift and go to state 26

state 50

    (6) sigparams -> ID . ID
    (7) sigparams -> ID . ID COMMA sigparams

    ID              shift and go to state 68


state 51

    (4) signature -> ID ID LPAREN sigparams . RPAREN

    RPAREN          shift and go to state 69


state 52

    (5) signature -> ID ID LPAREN RPAREN .

    LCHAV           reduce using rule 5 (signature -> ID ID LPAREN RPAREN .)


state 53

    (25) exp -> exp IGUAL exp1 .
    (27) exp1 -> exp1 . SOMA exp2
    (29) exp1 -> exp1 . SUBTRAIR exp2

    PV              reduce using rule 25 (exp -> exp IGUAL exp1 .)
    IGUAL           reduce using rule 25 (exp -> exp IGUAL exp1 .)
    RPAREN          reduce using rule 25 (exp -> exp IGUAL exp1 .)
    COMMA           reduce using rule 25 (exp -> exp IGUAL exp1 .)
    SOMA            shift and go to state 45
    SUBTRAIR        shift and go to state 46


state 54

    (13) stm -> WHILE LPAREN exp . RPAREN body
    (25) exp -> exp . IGUAL exp1

    RPAREN          shift and go to state 70
    IGUAL           shift and go to state 35


state 55

    (14) stm -> RETURN exp PV .

    WHILE           reduce using rule 14 (stm -> RETURN exp PV .)
    RETURN          reduce using rule 14 (stm -> RETURN exp PV .)
    FOR             reduce using rule 14 (stm -> RETURN exp PV .)
    REPEAT          reduce using rule 14 (stm -> RETURN exp PV .)
    BREAK           reduce using rule 14 (stm -> RETURN exp PV .)
    NEXT            reduce using rule 14 (stm -> RETURN exp PV .)
    SWITCH          reduce using rule 14 (stm -> RETURN exp PV .)
    IF              reduce using rule 14 (stm -> RETURN exp PV .)
    NUMBER_INT      reduce using rule 14 (stm -> RETURN exp PV .)
    NUMBER_FLOAT    reduce using rule 14 (stm -> RETURN exp PV .)
    ID              reduce using rule 14 (stm -> RETURN exp PV .)
    TRUE            reduce using rule 14 (stm -> RETURN exp PV .)
    FALSE           reduce using rule 14 (stm -> RETURN exp PV .)
    RCHAV           reduce using rule 14 (stm -> RETURN exp PV .)
    RPAREN          reduce using rule 14 (stm -> RETURN exp PV .)


state 56

    (15) stm -> FOR LPAREN ID . IN exp RPAREN body

    IN              shift and go to state 71


state 57

    (41) call -> ID LPAREN params . RPAREN

    RPAREN          shift and go to state 72


state 58

    (42) call -> ID LPAREN RPAREN .

    POT             reduce using rule 42 (call -> ID LPAREN RPAREN .)
    VEZES           reduce using rule 42 (call -> ID LPAREN RPAREN .)
    DIVIDIR         reduce using rule 42 (call -> ID LPAREN RPAREN .)
    SOMA            reduce using rule 42 (call -> ID LPAREN RPAREN .)
    SUBTRAIR        reduce using rule 42 (call -> ID LPAREN RPAREN .)
    PV              reduce using rule 42 (call -> ID LPAREN RPAREN .)
    IGUAL           reduce using rule 42 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 42 (call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 42 (call -> ID LPAREN RPAREN .)


state 59

    (43) params -> exp . COMMA params
    (44) params -> exp .
    (25) exp -> exp . IGUAL exp1

    COMMA           shift and go to state 73
    RPAREN          reduce using rule 44 (params -> exp .)
    IGUAL           shift and go to state 35


state 60

    (16) stm -> REPEAT body WHILE . LPAREN exp RPAREN PV

    LPAREN          shift and go to state 74


state 61

    (19) stm -> SWITCH LPAREN exp . COMMA cases RPAREN
    (25) exp -> exp . IGUAL exp1

    COMMA           shift and go to state 75
    IGUAL           shift and go to state 35


state 62

    (24) stm -> IF LPAREN exp . RPAREN body ELSE body
    (25) exp -> exp . IGUAL exp1

    RPAREN          shift and go to state 76
    IGUAL           shift and go to state 35


state 63

    (27) exp1 -> exp1 SOMA exp2 .
    (30) exp2 -> exp2 . VEZES exp3
    (32) exp2 -> exp2 . DIVIDIR exp3

    SOMA            reduce using rule 27 (exp1 -> exp1 SOMA exp2 .)
    SUBTRAIR        reduce using rule 27 (exp1 -> exp1 SOMA exp2 .)
    PV              reduce using rule 27 (exp1 -> exp1 SOMA exp2 .)
    IGUAL           reduce using rule 27 (exp1 -> exp1 SOMA exp2 .)
    RPAREN          reduce using rule 27 (exp1 -> exp1 SOMA exp2 .)
    COMMA           reduce using rule 27 (exp1 -> exp1 SOMA exp2 .)
    VEZES           shift and go to state 47
    DIVIDIR         shift and go to state 48


state 64

    (29) exp1 -> exp1 SUBTRAIR exp2 .
    (30) exp2 -> exp2 . VEZES exp3
    (32) exp2 -> exp2 . DIVIDIR exp3

    SOMA            reduce using rule 29 (exp1 -> exp1 SUBTRAIR exp2 .)
    SUBTRAIR        reduce using rule 29 (exp1 -> exp1 SUBTRAIR exp2 .)
    PV              reduce using rule 29 (exp1 -> exp1 SUBTRAIR exp2 .)
    IGUAL           reduce using rule 29 (exp1 -> exp1 SUBTRAIR exp2 .)
    RPAREN          reduce using rule 29 (exp1 -> exp1 SUBTRAIR exp2 .)
    COMMA           reduce using rule 29 (exp1 -> exp1 SUBTRAIR exp2 .)
    VEZES           shift and go to state 47
    DIVIDIR         shift and go to state 48


state 65

    (30) exp2 -> exp2 VEZES exp3 .

    VEZES           reduce using rule 30 (exp2 -> exp2 VEZES exp3 .)
    DIVIDIR         reduce using rule 30 (exp2 -> exp2 VEZES exp3 .)
    SOMA            reduce using rule 30 (exp2 -> exp2 VEZES exp3 .)
    SUBTRAIR        reduce using rule 30 (exp2 -> exp2 VEZES exp3 .)
    PV              reduce using rule 30 (exp2 -> exp2 VEZES exp3 .)
    IGUAL           reduce using rule 30 (exp2 -> exp2 VEZES exp3 .)
    RPAREN          reduce using rule 30 (exp2 -> exp2 VEZES exp3 .)
    COMMA           reduce using rule 30 (exp2 -> exp2 VEZES exp3 .)


state 66

    (32) exp2 -> exp2 DIVIDIR exp3 .

    VEZES           reduce using rule 32 (exp2 -> exp2 DIVIDIR exp3 .)
    DIVIDIR         reduce using rule 32 (exp2 -> exp2 DIVIDIR exp3 .)
    SOMA            reduce using rule 32 (exp2 -> exp2 DIVIDIR exp3 .)
    SUBTRAIR        reduce using rule 32 (exp2 -> exp2 DIVIDIR exp3 .)
    PV              reduce using rule 32 (exp2 -> exp2 DIVIDIR exp3 .)
    IGUAL           reduce using rule 32 (exp2 -> exp2 DIVIDIR exp3 .)
    RPAREN          reduce using rule 32 (exp2 -> exp2 DIVIDIR exp3 .)
    COMMA           reduce using rule 32 (exp2 -> exp2 DIVIDIR exp3 .)


state 67

    (33) exp3 -> exp4 POT exp3 .

    VEZES           reduce using rule 33 (exp3 -> exp4 POT exp3 .)
    DIVIDIR         reduce using rule 33 (exp3 -> exp4 POT exp3 .)
    SOMA            reduce using rule 33 (exp3 -> exp4 POT exp3 .)
    SUBTRAIR        reduce using rule 33 (exp3 -> exp4 POT exp3 .)
    PV              reduce using rule 33 (exp3 -> exp4 POT exp3 .)
    IGUAL           reduce using rule 33 (exp3 -> exp4 POT exp3 .)
    RPAREN          reduce using rule 33 (exp3 -> exp4 POT exp3 .)
    COMMA           reduce using rule 33 (exp3 -> exp4 POT exp3 .)


state 68

    (6) sigparams -> ID ID .
    (7) sigparams -> ID ID . COMMA sigparams

    RPAREN          reduce using rule 6 (sigparams -> ID ID .)
    COMMA           shift and go to state 77


state 69

    (4) signature -> ID ID LPAREN sigparams RPAREN .

    LCHAV           reduce using rule 4 (signature -> ID ID LPAREN sigparams RPAREN .)


state 70

    (13) stm -> WHILE LPAREN exp RPAREN . body
    (8) body -> . LCHAV stms RCHAV
    (9) body -> . LCHAV RCHAV

    LCHAV           shift and go to state 7

    body                           shift and go to state 78

state 71

    (15) stm -> FOR LPAREN ID IN . exp RPAREN body
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 79
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 72

    (41) call -> ID LPAREN params RPAREN .

    POT             reduce using rule 41 (call -> ID LPAREN params RPAREN .)
    VEZES           reduce using rule 41 (call -> ID LPAREN params RPAREN .)
    DIVIDIR         reduce using rule 41 (call -> ID LPAREN params RPAREN .)
    SOMA            reduce using rule 41 (call -> ID LPAREN params RPAREN .)
    SUBTRAIR        reduce using rule 41 (call -> ID LPAREN params RPAREN .)
    PV              reduce using rule 41 (call -> ID LPAREN params RPAREN .)
    IGUAL           reduce using rule 41 (call -> ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 41 (call -> ID LPAREN params RPAREN .)
    COMMA           reduce using rule 41 (call -> ID LPAREN params RPAREN .)


state 73

    (43) params -> exp COMMA . params
    (43) params -> . exp COMMA params
    (44) params -> . exp
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 59
    params                         shift and go to state 80
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 74

    (16) stm -> REPEAT body WHILE LPAREN . exp RPAREN PV
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 81
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 75

    (19) stm -> SWITCH LPAREN exp COMMA . cases RPAREN
    (20) cases -> . exp IGUAL body
    (21) cases -> . exp IGUAL body cases
    (22) cases -> . exp IGUAL stm
    (23) cases -> . exp IGUAL stm cases
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 82
    cases                          shift and go to state 83
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 76

    (24) stm -> IF LPAREN exp RPAREN . body ELSE body
    (8) body -> . LCHAV stms RCHAV
    (9) body -> . LCHAV RCHAV

    LCHAV           shift and go to state 7

    body                           shift and go to state 84

state 77

    (7) sigparams -> ID ID COMMA . sigparams
    (6) sigparams -> . ID ID
    (7) sigparams -> . ID ID COMMA sigparams

    ID              shift and go to state 50

    sigparams                      shift and go to state 85

state 78

    (13) stm -> WHILE LPAREN exp RPAREN body .

    WHILE           reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    RETURN          reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    FOR             reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    REPEAT          reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    BREAK           reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    NEXT            reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    SWITCH          reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    IF              reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    NUMBER_INT      reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    NUMBER_FLOAT    reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    ID              reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    TRUE            reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    FALSE           reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    RCHAV           reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)
    RPAREN          reduce using rule 13 (stm -> WHILE LPAREN exp RPAREN body .)


state 79

    (15) stm -> FOR LPAREN ID IN exp . RPAREN body
    (25) exp -> exp . IGUAL exp1

    RPAREN          shift and go to state 86
    IGUAL           shift and go to state 35


state 80

    (43) params -> exp COMMA params .

    RPAREN          reduce using rule 43 (params -> exp COMMA params .)


state 81

    (16) stm -> REPEAT body WHILE LPAREN exp . RPAREN PV
    (25) exp -> exp . IGUAL exp1

    RPAREN          shift and go to state 87
    IGUAL           shift and go to state 35


state 82

    (20) cases -> exp . IGUAL body
    (21) cases -> exp . IGUAL body cases
    (22) cases -> exp . IGUAL stm
    (23) cases -> exp . IGUAL stm cases
    (25) exp -> exp . IGUAL exp1

    IGUAL           shift and go to state 88


state 83

    (19) stm -> SWITCH LPAREN exp COMMA cases . RPAREN

    RPAREN          shift and go to state 89


state 84

    (24) stm -> IF LPAREN exp RPAREN body . ELSE body

    ELSE            shift and go to state 90


state 85

    (7) sigparams -> ID ID COMMA sigparams .

    RPAREN          reduce using rule 7 (sigparams -> ID ID COMMA sigparams .)


state 86

    (15) stm -> FOR LPAREN ID IN exp RPAREN . body
    (8) body -> . LCHAV stms RCHAV
    (9) body -> . LCHAV RCHAV

    LCHAV           shift and go to state 7

    body                           shift and go to state 91

state 87

    (16) stm -> REPEAT body WHILE LPAREN exp RPAREN . PV

    PV              shift and go to state 92


state 88

    (20) cases -> exp IGUAL . body
    (21) cases -> exp IGUAL . body cases
    (22) cases -> exp IGUAL . stm
    (23) cases -> exp IGUAL . stm cases
    (25) exp -> exp IGUAL . exp1
    (8) body -> . LCHAV stms RCHAV
    (9) body -> . LCHAV RCHAV
    (12) stm -> . exp PV
    (13) stm -> . WHILE LPAREN exp RPAREN body
    (14) stm -> . RETURN exp PV
    (15) stm -> . FOR LPAREN ID IN exp RPAREN body
    (16) stm -> . REPEAT body WHILE LPAREN exp RPAREN PV
    (17) stm -> . BREAK PV
    (18) stm -> . NEXT PV
    (19) stm -> . SWITCH LPAREN exp COMMA cases RPAREN
    (24) stm -> . IF LPAREN exp RPAREN body ELSE body
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    LCHAV           shift and go to state 7
    WHILE           shift and go to state 13
    RETURN          shift and go to state 14
    FOR             shift and go to state 15
    REPEAT          shift and go to state 17
    BREAK           shift and go to state 18
    NEXT            shift and go to state 19
    SWITCH          shift and go to state 20
    IF              shift and go to state 21
    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 12
    body                           shift and go to state 93
    stm                            shift and go to state 94
    exp1                           shift and go to state 95
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 89

    (19) stm -> SWITCH LPAREN exp COMMA cases RPAREN .

    WHILE           reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    RETURN          reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    FOR             reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    REPEAT          reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    BREAK           reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    NEXT            reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    SWITCH          reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    IF              reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    NUMBER_INT      reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    NUMBER_FLOAT    reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    ID              reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    TRUE            reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    FALSE           reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    RCHAV           reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)
    RPAREN          reduce using rule 19 (stm -> SWITCH LPAREN exp COMMA cases RPAREN .)


state 90

    (24) stm -> IF LPAREN exp RPAREN body ELSE . body
    (8) body -> . LCHAV stms RCHAV
    (9) body -> . LCHAV RCHAV

    LCHAV           shift and go to state 7

    body                           shift and go to state 96

state 91

    (15) stm -> FOR LPAREN ID IN exp RPAREN body .

    WHILE           reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    RETURN          reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    FOR             reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    REPEAT          reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    BREAK           reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    NEXT            reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    SWITCH          reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    IF              reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    NUMBER_INT      reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    NUMBER_FLOAT    reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    ID              reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    TRUE            reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    FALSE           reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    RCHAV           reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)
    RPAREN          reduce using rule 15 (stm -> FOR LPAREN ID IN exp RPAREN body .)


state 92

    (16) stm -> REPEAT body WHILE LPAREN exp RPAREN PV .

    WHILE           reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    RETURN          reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    FOR             reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    REPEAT          reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    BREAK           reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    NEXT            reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    SWITCH          reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    IF              reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    NUMBER_INT      reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    NUMBER_FLOAT    reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    ID              reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    TRUE            reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    FALSE           reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    RCHAV           reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)
    RPAREN          reduce using rule 16 (stm -> REPEAT body WHILE LPAREN exp RPAREN PV .)


state 93

    (20) cases -> exp IGUAL body .
    (21) cases -> exp IGUAL body . cases
    (20) cases -> . exp IGUAL body
    (21) cases -> . exp IGUAL body cases
    (22) cases -> . exp IGUAL stm
    (23) cases -> . exp IGUAL stm cases
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 20 (cases -> exp IGUAL body .)
    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 82
    cases                          shift and go to state 97
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 94

    (22) cases -> exp IGUAL stm .
    (23) cases -> exp IGUAL stm . cases
    (20) cases -> . exp IGUAL body
    (21) cases -> . exp IGUAL body cases
    (22) cases -> . exp IGUAL stm
    (23) cases -> . exp IGUAL stm cases
    (25) exp -> . exp IGUAL exp1
    (26) exp -> . exp1
    (27) exp1 -> . exp1 SOMA exp2
    (28) exp1 -> . exp2
    (29) exp1 -> . exp1 SUBTRAIR exp2
    (30) exp2 -> . exp2 VEZES exp3
    (31) exp2 -> . exp3
    (32) exp2 -> . exp2 DIVIDIR exp3
    (33) exp3 -> . exp4 POT exp3
    (34) exp3 -> . exp4
    (35) exp4 -> . call
    (36) exp4 -> . NUMBER_INT
    (37) exp4 -> . NUMBER_FLOAT
    (38) exp4 -> . ID
    (39) exp4 -> . TRUE
    (40) exp4 -> . FALSE
    (41) call -> . ID LPAREN params RPAREN
    (42) call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 22 (cases -> exp IGUAL stm .)
    NUMBER_INT      shift and go to state 27
    NUMBER_FLOAT    shift and go to state 28
    ID              shift and go to state 16
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30

    exp                            shift and go to state 82
    cases                          shift and go to state 98
    exp1                           shift and go to state 22
    exp2                           shift and go to state 23
    exp3                           shift and go to state 24
    exp4                           shift and go to state 25
    call                           shift and go to state 26

state 95

    (25) exp -> exp IGUAL exp1 .
    (27) exp1 -> exp1 . SOMA exp2
    (29) exp1 -> exp1 . SUBTRAIR exp2
    (26) exp -> exp1 .

  ! reduce/reduce conflict for IGUAL resolved using rule 25 (exp -> exp IGUAL exp1 .)
    IGUAL           reduce using rule 25 (exp -> exp IGUAL exp1 .)
    SOMA            shift and go to state 45
    SUBTRAIR        shift and go to state 46
    PV              reduce using rule 26 (exp -> exp1 .)

  ! IGUAL           [ reduce using rule 26 (exp -> exp1 .) ]


state 96

    (24) stm -> IF LPAREN exp RPAREN body ELSE body .

    WHILE           reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    RETURN          reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    FOR             reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    REPEAT          reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    BREAK           reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    NEXT            reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    SWITCH          reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    IF              reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    NUMBER_INT      reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    NUMBER_FLOAT    reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    ID              reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    TRUE            reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    FALSE           reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    RCHAV           reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)
    RPAREN          reduce using rule 24 (stm -> IF LPAREN exp RPAREN body ELSE body .)


state 97

    (21) cases -> exp IGUAL body cases .

    RPAREN          reduce using rule 21 (cases -> exp IGUAL body cases .)


state 98

    (23) cases -> exp IGUAL stm cases .

    RPAREN          reduce using rule 23 (cases -> exp IGUAL stm cases .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 95 resolved using rule (exp -> exp IGUAL exp1)
WARNING: rejected rule (exp -> exp1) in state 95
